
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.grammar;

import java_cup.runtime.*;
import compiler.sintactic.Symbols.*;
import compiler.sintactic.*;
import compiler.sintactic.Symbol;
import compiler.sintactic.Symbols.L_array;
import compiler.ErrorC;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\003\005\000\002\005" +
    "\007\000\002\004\004\000\002\023\004\000\002\023\002" +
    "\000\002\024\010\000\002\025\005\000\002\025\004\000" +
    "\002\026\006\000\002\026\004\000\002\027\004\000\002" +
    "\027\002\000\002\006\004\000\002\006\002\000\002\007" +
    "\007\000\002\010\005\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\005\000\002\013\004\000\002\015\005\000\002" +
    "\015\004\000\002\014\006\000\002\014\004\000\002\016" +
    "\003\000\002\016\005\000\002\017\004\000\002\017\003" +
    "\000\002\020\005\000\002\021\004\000\002\021\002\000" +
    "\002\022\003\000\002\022\003\000\002\030\006\000\002" +
    "\030\005\000\002\031\012\000\002\031\015\000\002\031" +
    "\011\000\002\031\013\000\002\031\006\000\002\031\006" +
    "\000\002\031\007\000\002\031\003\000\002\032\004\000" +
    "\002\032\004\000\002\032\002\000\002\033\004\000\002" +
    "\033\004\000\002\033\003\000\002\034\006\000\002\034" +
    "\012\000\002\034\002\000\002\035\003\000\002\035\004" +
    "\000\002\036\004\000\002\036\002\000\002\037\005\000" +
    "\002\037\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\040\005\000\002\040\003\000\002\040" +
    "\004\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\005\000\002\043\003\000" +
    "\002\043\005\000\002\043\003\000\002\044\004\000\002" +
    "\045\006\000\002\045\005\000\002\046\004\000\002\002" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\016\013\005\014\004\015\014\016\015\017" +
    "\ufff5\026\ufff5\001\002\000\006\051\uffed\061\uffed\001\002" +
    "\000\006\051\uffee\061\uffee\001\002\000\006\051\uffc9\061" +
    "\uffc9\001\002\000\004\002\304\001\002\000\006\017\uffa4" +
    "\026\ufffc\001\002\000\006\051\040\061\251\001\002\000" +
    "\016\013\005\014\004\015\014\016\015\017\ufff5\026\ufff5" +
    "\001\002\000\004\026\uffa4\001\002\000\006\051\uffec\061" +
    "\uffec\001\002\000\010\013\005\014\004\015\014\001\002" +
    "\000\006\051\uffc8\061\uffc8\001\002\000\006\002\ufff3\017" +
    "\222\001\002\000\004\026\021\001\002\000\004\047\022" +
    "\001\002\000\032\004\033\007\026\010\034\011\036\013" +
    "\005\014\004\015\014\016\015\022\025\050\uffdf\051\040" +
    "\061\027\001\002\000\004\061\220\001\002\000\034\004" +
    "\033\007\026\010\034\011\036\013\005\014\004\015\014" +
    "\016\015\020\uffdf\022\025\050\uffdf\051\040\061\027\001" +
    "\002\000\004\045\213\001\002\000\004\045\201\001\002" +
    "\000\006\044\176\045\061\001\002\000\004\050\175\001" +
    "\002\000\040\004\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\020\uffde\021\uffde\022" +
    "\uffde\050\uffde\051\uffde\061\uffde\001\002\000\040\004\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd\050\uffdd\051\uffdd" +
    "\061\uffdd\001\002\000\004\045\152\001\002\000\004\045" +
    "\144\001\002\000\042\004\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\046\uffd3\050\uffd3\051\uffd3\061\uffd3\001\002" +
    "\000\004\047\120\001\002\000\004\044\115\001\002\000" +
    "\026\023\044\024\047\025\042\045\043\051\040\054\052" +
    "\057\050\060\041\061\053\062\055\001\002\000\044\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\046" +
    "\uffb0\052\uffb0\053\uffb0\055\uffb0\001\002\000\044\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\046\uffc3" +
    "\052\uffc3\053\uffc3\055\uffc3\001\002\000\026\023\044\024" +
    "\047\025\042\045\043\051\040\054\052\057\050\060\041" +
    "\061\053\062\055\001\002\000\044\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\046\uffc1\052\uffc1\053" +
    "\uffc1\055\uffc1\001\002\000\044\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\046\uffa9\052\uffa9\053\uffa9" +
    "\055\uffa9\001\002\000\044\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\046\uffad\052\uffad\053\uffad\055" +
    "\uffad\001\002\000\044\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\046\uffc2\052\uffc2\053\uffc2\055\uffc2" +
    "\001\002\000\026\023\044\024\047\025\042\045\043\051" +
    "\040\054\052\057\050\060\041\061\053\062\055\001\002" +
    "\000\042\027\076\030\107\031\077\032\104\033\100\034" +
    "\074\035\101\036\105\037\106\040\103\041\075\042\110" +
    "\043\102\046\uffbf\052\uffbf\055\uffbf\001\002\000\004\063" +
    "\071\001\002\000\046\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\045\061\046\uffae\052\uffae\053\uffae" +
    "\055\uffae\001\002\000\044\027\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\046\uffaf\052\uffaf\053\uffaf\055" +
    "\uffaf\001\002\000\044\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\046\uffab\052\uffab\053\uffab\055\uffab" +
    "\001\002\000\004\052\057\001\002\000\006\051\040\061" +
    "\uffa6\001\002\000\004\061\uffa7\001\002\000\026\023\044" +
    "\024\047\025\042\045\043\046\065\051\040\054\052\060" +
    "\041\061\053\062\055\001\002\000\102\004\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\046\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\055\uffa5\061\uffa5\001\002\000\004\046" +
    "\070\001\002\000\006\046\uffe5\053\066\001\002\000\102" +
    "\004\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\046\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\061\uffe8\001" +
    "\002\000\024\023\044\024\047\025\042\045\043\051\040" +
    "\054\052\060\041\061\053\062\055\001\002\000\004\046" +
    "\uffe4\001\002\000\102\004\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\055\uffe9\061\uffe9\001\002\000\004\054\072\001\002\000" +
    "\044\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\046\uffac\052\uffac\053\uffac\055\uffac\001\002\000\026" +
    "\023\044\024\047\025\042\045\043\051\040\054\052\057" +
    "\050\060\041\061\053\062\055\001\002\000\026\023\uffbd" +
    "\024\uffbd\025\uffbd\045\uffbd\051\uffbd\054\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\001\002\000\026\023\uffb8\024\uffb8" +
    "\025\uffb8\045\uffb8\051\uffb8\054\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\001\002\000\026\023\uffb5\024\uffb5\025\uffb5" +
    "\045\uffb5\051\uffb5\054\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\001\002\000\026\023\uffb3\024\uffb3\025\uffb3\045\uffb3" +
    "\051\uffb3\054\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\001" +
    "\002\000\026\023\uffb1\024\uffb1\025\uffb1\045\uffb1\051\uffb1" +
    "\054\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\001\002\000" +
    "\026\023\uffbc\024\uffbc\025\uffbc\045\uffbc\051\uffbc\054\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\001\002\000\026\023" +
    "\uffb6\024\uffb6\025\uffb6\045\uffb6\051\uffb6\054\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\001\002\000\026\023\uffb9\024" +
    "\uffb9\025\uffb9\045\uffb9\051\uffb9\054\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\001\002\000\026\023\uffb2\024\uffb2\025" +
    "\uffb2\045\uffb2\051\uffb2\054\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\001\002\000\026\023\uffbb\024\uffbb\025\uffbb\045" +
    "\uffbb\051\uffbb\054\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\001\002\000\026\023\uffba\024\uffba\025\uffba\045\uffba\051" +
    "\uffba\054\uffba\057\uffba\060\uffba\061\uffba\062\uffba\001\002" +
    "\000\026\023\uffb4\024\uffb4\025\uffb4\045\uffb4\051\uffb4\054" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002\000\026" +
    "\023\uffb7\024\uffb7\025\uffb7\045\uffb7\051\uffb7\054\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\001\002\000\010\046\uffc0" +
    "\052\uffc0\055\uffc0\001\002\000\010\046\uffbe\052\uffbe\055" +
    "\uffbe\001\002\000\004\046\114\001\002\000\044\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\046\uffaa" +
    "\052\uffaa\053\uffaa\055\uffaa\001\002\000\026\023\044\024" +
    "\047\025\042\045\043\051\040\054\052\057\050\060\041" +
    "\061\053\062\055\001\002\000\004\055\117\001\002\000" +
    "\042\004\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\022\uffd5\046" +
    "\uffd5\050\uffd5\051\uffd5\061\uffd5\001\002\000\040\004\033" +
    "\007\026\010\034\011\036\012\122\013\005\014\004\015" +
    "\014\016\015\020\121\021\127\022\025\050\uffd0\051\040" +
    "\061\027\001\002\000\026\023\044\024\047\025\042\045" +
    "\043\051\040\054\052\057\050\060\041\061\053\062\055" +
    "\001\002\000\004\055\141\001\002\000\004\050\133\001" +
    "\002\000\040\004\033\007\026\010\034\011\036\012\122" +
    "\013\005\014\004\015\014\016\015\020\121\021\127\022" +
    "\025\050\uffd0\051\040\061\027\001\002\000\040\004\033" +
    "\007\026\010\034\011\036\012\122\013\005\014\004\015" +
    "\014\016\015\020\121\021\127\022\025\050\uffd0\051\040" +
    "\061\027\001\002\000\040\004\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\050\uffcd\051\uffcd\061\uffcd\001\002\000" +
    "\004\055\130\001\002\000\040\004\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\020" +
    "\uffce\021\uffce\022\uffce\050\uffce\051\uffce\061\uffce\001\002" +
    "\000\004\050\uffd1\001\002\000\004\050\uffd2\001\002\000" +
    "\004\010\134\001\002\000\004\045\135\001\002\000\026" +
    "\023\044\024\047\025\042\045\043\051\040\054\052\057" +
    "\050\060\041\061\053\062\055\001\002\000\004\046\137" +
    "\001\002\000\004\055\140\001\002\000\042\004\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\020\uffd7\021\uffd7\022\uffd7\046\uffd7\050\uffd7\051" +
    "\uffd7\061\uffd7\001\002\000\040\004\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\050\uffcf\051\uffcf\061\uffcf\001\002" +
    "\000\004\055\143\001\002\000\040\004\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\050\uffe1\051\uffe1\061\uffe1\001" +
    "\002\000\026\023\044\024\047\025\042\045\043\051\040" +
    "\054\052\057\050\060\041\061\053\062\055\001\002\000" +
    "\004\046\146\001\002\000\004\047\147\001\002\000\040" +
    "\004\033\007\026\010\034\011\036\012\122\013\005\014" +
    "\004\015\014\016\015\020\121\021\127\022\025\050\uffd0" +
    "\051\040\061\027\001\002\000\004\050\151\001\002\000" +
    "\042\004\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8\046" +
    "\uffd8\050\uffd8\051\uffd8\061\uffd8\001\002\000\026\023\044" +
    "\024\047\025\042\045\043\051\040\054\052\057\050\060" +
    "\041\061\053\062\055\001\002\000\004\046\154\001\002" +
    "\000\004\047\155\001\002\000\040\004\033\007\026\010" +
    "\034\011\036\012\122\013\005\014\004\015\014\016\015" +
    "\020\121\021\127\022\025\050\uffd0\051\040\061\027\001" +
    "\002\000\004\050\157\001\002\000\046\004\uffca\005\161" +
    "\006\162\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\020\uffca\021\uffca\022\uffca\046\uffca" +
    "\050\uffca\051\uffca\061\uffca\001\002\000\042\004\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\020\uffda\021\uffda\022\uffda\046\uffda\050\uffda\051" +
    "\uffda\061\uffda\001\002\000\004\047\172\001\002\000\004" +
    "\045\163\001\002\000\026\023\044\024\047\025\042\045" +
    "\043\051\040\054\052\057\050\060\041\061\053\062\055" +
    "\001\002\000\004\046\165\001\002\000\004\047\166\001" +
    "\002\000\040\004\033\007\026\010\034\011\036\012\122" +
    "\013\005\014\004\015\014\016\015\020\121\021\127\022" +
    "\025\050\uffd0\051\040\061\027\001\002\000\004\050\170" +
    "\001\002\000\046\004\uffca\005\161\006\162\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\020\uffca\021\uffca\022\uffca\046\uffca\050\uffca\051\uffca\061" +
    "\uffca\001\002\000\042\004\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\046\uffcb\050\uffcb\051\uffcb\061\uffcb\001\002" +
    "\000\040\004\033\007\026\010\034\011\036\012\122\013" +
    "\005\014\004\015\014\016\015\020\121\021\127\022\025" +
    "\050\uffd0\051\040\061\027\001\002\000\004\050\174\001" +
    "\002\000\042\004\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\046\uffcc\050\uffcc\051\uffcc\061\uffcc\001\002\000\006" +
    "\002\uffff\017\uffff\001\002\000\026\023\044\024\047\025" +
    "\042\045\043\051\040\054\052\057\050\060\041\061\053" +
    "\062\055\001\002\000\004\055\200\001\002\000\042\004" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\020\uffd6\021\uffd6\022\uffd6\046\uffd6\050" +
    "\uffd6\051\uffd6\061\uffd6\001\002\000\012\013\005\014\004" +
    "\015\014\016\015\001\002\000\004\055\203\001\002\000" +
    "\026\023\044\024\047\025\042\045\043\051\040\054\052" +
    "\057\050\060\041\061\053\062\055\001\002\000\004\055" +
    "\205\001\002\000\020\004\033\007\026\010\034\011\036" +
    "\022\025\051\040\061\027\001\002\000\004\046\207\001" +
    "\002\000\004\047\210\001\002\000\040\004\033\007\026" +
    "\010\034\011\036\012\122\013\005\014\004\015\014\016" +
    "\015\020\121\021\127\022\025\050\uffd0\051\040\061\027" +
    "\001\002\000\004\050\212\001\002\000\042\004\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\020\uffd9\021\uffd9\022\uffd9\046\uffd9\050\uffd9\051" +
    "\uffd9\061\uffd9\001\002\000\026\023\044\024\047\025\042" +
    "\045\043\051\040\054\052\057\050\060\041\061\053\062" +
    "\055\001\002\000\004\046\215\001\002\000\004\055\216" +
    "\001\002\000\042\004\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\046\uffd4\050\uffd4\051\uffd4\061\uffd4\001\002\000" +
    "\006\020\uffe0\050\uffe0\001\002\000\046\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\046\uffa8" +
    "\052\uffa8\053\uffa8\055\uffa8\001\002\000\006\002\ufff3\017" +
    "\222\001\002\000\012\013\005\014\004\015\014\056\227" +
    "\001\002\000\004\002\000\001\002\000\004\047\242\001" +
    "\002\000\004\061\ufff0\001\002\000\004\061\230\001\002" +
    "\000\004\061\uffef\001\002\000\004\045\231\001\002\000" +
    "\012\013\005\014\004\015\014\046\233\001\002\000\004" +
    "\047\ufff1\001\002\000\004\047\uffea\001\002\000\004\061" +
    "\237\001\002\000\004\046\236\001\002\000\004\047\uffeb" +
    "\001\002\000\006\046\uffe6\053\240\001\002\000\010\013" +
    "\005\014\004\015\014\001\002\000\004\046\uffe7\001\002" +
    "\000\034\004\033\007\026\010\034\011\036\013\005\014" +
    "\004\015\014\016\015\020\uffdf\022\025\050\uffdf\051\040" +
    "\061\027\001\002\000\004\050\246\001\002\000\006\020" +
    "\121\050\uffe2\001\002\000\004\050\uffe3\001\002\000\006" +
    "\002\ufff2\017\ufff2\001\002\000\004\002\ufff4\001\002\000" +
    "\006\017\ufff6\026\ufff6\001\002\000\010\044\uffc4\053\261" +
    "\055\uffc4\001\002\000\006\044\256\055\uffc6\001\002\000" +
    "\004\055\254\001\002\000\046\004\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\026\uffdb\050\uffdb\051\uffdb" +
    "\055\uffdb\061\uffdb\001\002\000\004\055\260\001\002\000" +
    "\026\023\044\024\047\025\042\045\043\051\040\054\052" +
    "\057\050\060\041\061\053\062\055\001\002\000\004\055" +
    "\uffc7\001\002\000\046\004\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\026\uffdc\050\uffdc\051\uffdc\055\uffdc" +
    "\061\uffdc\001\002\000\004\061\251\001\002\000\006\044" +
    "\uffc5\055\uffc5\001\002\000\004\026\ufffe\001\002\000\006" +
    "\017\uffa4\026\ufffc\001\002\000\004\017\266\001\002\000" +
    "\012\013\005\014\004\015\014\056\227\001\002\000\004" +
    "\061\270\001\002\000\004\045\271\001\002\000\012\013" +
    "\005\014\004\015\014\046\274\001\002\000\004\055\273" +
    "\001\002\000\006\017\ufffb\026\ufffb\001\002\000\004\055" +
    "\ufff9\001\002\000\004\061\300\001\002\000\004\046\277" +
    "\001\002\000\004\055\ufffa\001\002\000\006\046\ufff7\053" +
    "\301\001\002\000\010\013\005\014\004\015\014\001\002" +
    "\000\004\046\ufff8\001\002\000\004\026\ufffd\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\016\003\006\004\012\012\005\027\007\030" +
    "\011\035\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\264\023" +
    "\262\024\263\001\001\000\010\037\251\044\252\045\022" +
    "\001\001\000\012\012\005\027\247\030\011\035\010\001" +
    "\001\000\006\002\017\005\016\001\001\000\002\001\001" +
    "\000\004\012\015\001\001\000\002\001\001\000\006\006" +
    "\222\007\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\012\005\021\027\022\023\030\030\031\031\035" +
    "\010\044\036\045\022\046\034\001\001\000\002\001\001" +
    "\000\024\012\005\021\216\022\023\030\030\031\031\035" +
    "\010\044\036\045\022\046\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\040\055\041\044\043\050\044\045" +
    "\045\022\046\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\040\112\041\044\043\050\044\045\045\022" +
    "\046\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\040\111\041\044" +
    "\043\050\044\045\045\022\046\053\001\001\000\004\042" +
    "\072\001\001\000\002\001\001\000\004\015\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\057\001\001\000\002\001\001\000\016\016\062" +
    "\041\044\043\063\044\045\045\022\046\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\016\066\041\044\043\063\044\045\045" +
    "\022\046\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\040\110\041" +
    "\044\043\050\044\045\045\022\046\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\040\115\041\044\043\050\044\045\045\022" +
    "\046\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\005\020\125\022\123\030\030\031\031\032\122" +
    "\033\124\035\010\044\036\045\022\046\034\001\001\000" +
    "\016\040\141\041\044\043\050\044\045\045\022\046\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\005\020\125\022\123\030\030\031\031\032\131\033\124" +
    "\035\010\044\036\045\022\046\034\001\001\000\030\012" +
    "\005\020\125\022\123\030\030\031\031\032\130\033\124" +
    "\035\010\044\036\045\022\046\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\040\135\041\044\043\050\044\045\045\022\046\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\040\144\041\044\043\050\044\045\045\022\046" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\005\020\125\022\123\030\030\031\031\032\147\033" +
    "\124\035\010\044\036\045\022\046\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\040\152\041\044\043" +
    "\050\044\045\045\022\046\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\005\020\125\022\123\030" +
    "\030\031\031\032\155\033\124\035\010\044\036\045\022" +
    "\046\034\001\001\000\002\001\001\000\004\034\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\040\163\041\044\043\050\044\045\045\022\046" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\005\020\125\022\123\030\030\031\031\032\166\033" +
    "\124\035\010\044\036\045\022\046\034\001\001\000\002" +
    "\001\001\000\004\034\170\001\001\000\002\001\001\000" +
    "\030\012\005\020\125\022\123\030\030\031\031\032\172" +
    "\033\124\035\010\044\036\045\022\046\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\040\176\041\044\043\050\044\045\045\022\046\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\005" +
    "\030\201\035\010\001\001\000\002\001\001\000\016\040" +
    "\203\041\044\043\050\044\045\045\022\046\053\001\001" +
    "\000\002\001\001\000\012\031\205\044\036\045\022\046" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\005\020\125\022\123\030\030\031\031\032\210\033" +
    "\124\035\010\044\036\045\022\046\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\040\213\041\044\043" +
    "\050\044\045\045\022\046\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\246\007\220\001\001\000\010" +
    "\010\223\011\225\012\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\231\001\001\000\006\012\233\014" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\233\014\240\001\001\000\002\001\001" +
    "\000\026\012\005\017\242\021\243\022\023\030\030\031" +
    "\031\035\010\044\036\045\022\046\034\001\001\000\002" +
    "\001\001\000\004\020\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\040\256\041\044" +
    "\043\050\044\045\045\022\046\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\264\023\302\024" +
    "\263\001\001\000\002\001\001\000\006\011\266\012\224" +
    "\001\001\000\002\001\001\000\004\025\271\001\001\000" +
    "\006\012\274\026\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\274" +
    "\026\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }
***/

    private Xava xava;
    private ComplexSymbolFactory csf = new ComplexSymbolFactory();
    public TSimbolos tSimbolos = new TSimbolos();
    AnSem ansem = new AnSem(tSimbolos);

    public TSimbolos getTSimbolos() {
        return tSimbolos;
    }

    public Xava getXavaArbol() {
        return xava;
    }


    @Override
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        String message = "Esperabamos " + this.showExpectedTokenIds();
        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
        ErrorC.añadirError(new ErrorC(message, cs.getLeft().getLine(), cs.getLeft().getColumn(), Fase.SINTÁCTICO));
    }

    private String showExpectedTokenIds() {
        List<String> list = this.expected_token_ids().stream().map(this::symbl_name_from_id).toList();
        return (list.size() > 0) ? list.toString() : "something else";
    }

    private int getDimensionesArray(L_array list_array) {
        int dimensiones = 0;
        for (L_array aux = list_array; aux != null; aux = aux.getlArray()) {
            dimensiones++;
        }
        return dimensiones;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= XAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Xava start_val = (Xava)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // XAVA ::= DECLGLOB MAIN_FN FUNCIONES 
            {
              Xava RESULT =null;
		int gdeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gdeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclGlob gdecls = (DeclGlob)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Main_fn main = (Main_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Funciones funciones = (Funciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        xava = new Xava(gdecls, main, funciones, 0, 0);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("XAVA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN_FN ::= M PRINCIPAL LLAVE_A SENTS LLAVE_C 
            {
              Main_fn RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Main_fn(sents, sentsleft, sentsright);                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_FN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLGLOB ::= DECLS DECLSF 
            {
              DeclGlob RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclsF declsf = (DeclsF)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new DeclGlob(declsf, decls, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLGLOB",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLSF ::= DECLF DECLSF 
            {
              DeclsF RESULT =null;
		int declfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclF declf = (DeclF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclsF declsf = (DeclsF)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclsF(declf, declsf, declfleft, declfright);                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLSF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLSF ::= 
            {
              DeclsF RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLSF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLF ::= M FUNCION ETYPE ID ARGS_DECLF P_COMA 
            {
              DeclF RESULT =null;
		int eTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		EnumType eType = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int args_declfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int args_declfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Args_Declf args_declf = (Args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  if (!tSimbolos.ponerSymbol(new Symbol(id, TipoElemento.FUNCION, eType, null, true, 0, idleft))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la función ha sido declarada anteriormente o el nombre de la función ya está usada
                            ErrorC.añadirError(new ErrorC("Función " + id + "declarada previamente", idleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new DeclF(eType, id, args_declf, eTypeleft, eTyperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLF",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARGS_DECLF ::= PAR_A L_ARGS_DECLF PAR_C 
            {
              Args_Declf RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Declf args = (L_args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Args_Declf(args, args.getLinea(), args.getColumna());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_DECLF",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ARGS_DECLF ::= PAR_A PAR_C 
            {
              Args_Declf RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_DECLF",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_ARGS_DECLF ::= STYPE ID COMA L_ARGS_DECLF 
            {
              L_args_Declf RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Declf args = (L_args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (!tSimbolos.ponerSymbol(new Symbol(id, TipoElemento.PARAMETRO, stype, null, false, 0, idleft))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                            ErrorC.añadirError(new ErrorC("Variable " + id + "declarada previamente", idleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new L_args_Declf(stype, id, args, stypeleft, styperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_DECLF",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_ARGS_DECLF ::= STYPE ID 
            {
              L_args_Declf RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if (!tSimbolos.ponerSymbol(new Symbol(id, TipoElemento.PARAMETRO, stype, null, false, 0, idleft))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                            ErrorC.añadirError(new ErrorC("Variable " + id + "declarada previamente", idleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new L_args_Declf(stype, id, stypeleft, styperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_DECLF",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLS ::= DECL DECLS 
            {
              Decls RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decls(decl, decls, declleft, declright);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLS ::= 
            {
              Decls RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES ::= FUNCIONG FUNCIONES 
            {
              Funciones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncionG f = (FuncionG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Funciones funciones = (Funciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Funciones(f, funciones, fleft,fright);                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES ::= 
            {
              Funciones RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCIONG ::= FUNCION CAP LLAVE_A FSENTS LLAVE_C 
            {
              FuncionG RESULT =null;
		int capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Cap cap = (Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int f_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int f_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FSents f_sents = (FSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (ansem.existeFuncion(cap)) {
                            ansem.isReturn(f_sents);
                            RESULT = new FuncionG(cap, f_sents, capleft, capright);
                        }

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONG",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CAP ::= ETYPE ID ARGS_CAP 
            {
              Cap RESULT =null;
		int etypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int etyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		EnumType etype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int args_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int args_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args_Cap args_cap = (Args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        tSimbolos.updatenActual(id);
                        RESULT = new Cap(etype, id, args_cap, etypeleft, etyperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ETYPE ::= STYPE 
            {
              EnumType RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stype;                                                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ETYPE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ETYPE ::= VACIO 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.VACIO;                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ETYPE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STYPE ::= ENTERO 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.ENTERO;                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STYPE ::= BOOLEANO 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.BOOLEANO;                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STYPE ::= CARACTER 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.CARACTER;                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGS_CAP ::= PAR_A L_ARGS_CAP PAR_C 
            {
              Args_Cap RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Cap args = (L_args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Cap(args, args.getLinea(), args.getColumna());                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CAP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGS_CAP ::= PAR_A PAR_C 
            {
              Args_Cap RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CAP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGS_CALL ::= PAR_A L_ARGS_CALL PAR_C 
            {
              Args_Call RESULT =null;
		int l_args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l_args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Call l_args_call = (L_args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Call(l_args_call, l_args_call.getLinea(), l_args_call.getColumna());      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CALL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGS_CALL ::= PAR_A PAR_C 
            {
              Args_Call RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CALL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_ARGS_CAP ::= STYPE ID COMA L_ARGS_CAP 
            {
              L_args_Cap RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_args_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_args_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Cap l_args_cap = (L_args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Cap(stype, id, l_args_cap, stypeleft, styperight);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_ARGS_CAP ::= STYPE ID 
            {
              L_args_Cap RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Cap(stype, id, stypeleft, styperight);                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_ARGS_CALL ::= VALUE 
            {
              L_args_Call RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Call(value, valueleft, valueright);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L_ARGS_CALL ::= VALUE COMA L_ARGS_CALL 
            {
              L_args_Call RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Call l_args_call = (L_args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Call(value, l_args_call, valueleft, valueright);                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FSENTS ::= SENTS RET_PROC 
            {
              FSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ret_procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ret_procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetProc ret_proc = (RetProc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FSents(sents, ret_proc, sentsleft, sentsright);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FSENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FSENTS ::= SENTS 
            {
              FSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FSents(sents, sentsleft, sentsright);                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FSENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RET_PROC ::= DEVUELVE E P_COMA 
            {
              RetProc RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RetProc(exp, expleft, expright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RET_PROC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTS ::= SENT SENTS 
            {
              Sents RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sents(sent, sents, sentleft, sentright);                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTS ::= 
            {
              Sents RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= DECL 
            {
              Sent RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sent(decl, declleft, declright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= INST 
            {
              Sent RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sent(inst, instleft, instright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECL ::= TYPE LID DASIGNACION P_COMA 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Lid lid = (Lid)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int d_asignacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int d_asignacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		D_asig d_asignacion = (D_asig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (d_asignacion != null) {
                            ansem.gestAsig(type.getStype(), d_asignacion.getE());
                        } else {
                            if (type.getConstante()) {
                            ErrorC.añadirError(new ErrorC("Las constantes deben tener un valor asignado", type.getLinea(), Fase.SEMÁNTICO));
                            }
                        }
                        for (Lid aux = lid; aux != null; aux = aux.getLid()) {
                            if (!tSimbolos.ponerSymbol(new Symbol(aux.getId(), TipoElemento.VARIABLE, type.getStype(), null, type.getConstante(), 0, lidleft))) {
                                // MANEJO DE ERRORES SEMANTICOS
                                // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                                ErrorC.añadirError(new ErrorC("Variable declarada previamente", aux.getLinea(), Fase.SEMÁNTICO));
                            }
                        }

                        RESULT = new Decl(type, lid, d_asignacion, typeleft, typeright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECL ::= TYPE ARRAY P_COMA 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayG array = (ArrayG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (!type.getConstante()) {

                            if (!tSimbolos.ponerSymbol(new Symbol(array.getId(), TipoElemento.ARRAY, type.getStype(), null, false, array.getDimension(), arrayleft))) {
                                // MANEJO DE ERRORES SEMANTICOS
                                // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                                ErrorC.añadirError(new ErrorC("Variable " + array.getId() + "declarada previamente", arrayleft, Fase.SEMÁNTICO));
                            }
                            RESULT = new Decl(type, array, typeleft, typeright);
                        } else {
                            // MANEJO DE ERRORES SEMANTICOS
                            // No se puede declarar un array de tipo constante
                            ErrorC.añadirError(new ErrorC("Un array no puede ser constante", typeleft, Fase.SEMÁNTICO));
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= SI PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C CONT_COND 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cont_condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cont_condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cont_cond cont_cond = (Cont_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Inst("cond", exp, c_sents, null, null, cont_cond, null, expleft, expright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST ::= PARA PAR_A DECL P_COMA E P_COMA INST PAR_C LLAVE_A C_SENTS LLAVE_C 
            {
              Inst RESULT =null;
		int decl_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int decl_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Decl decl_cap = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        int n = 0;
                        for (Lid aux = decl_cap.getLid(); aux != null; aux = aux.getLid()) {
                            n++;
                            if (n > 1) {
                                // MANEJO DE ERRORES SEMANTICOS
                                // Solo se puede declarar una variable en el para
                                ErrorC.añadirError(new ErrorC("Solo se puede declarar una variable en el para", aux.getLinea(), Fase.SEMÁNTICO));
                            }
                        }
                        if (inst.getType() != "asig") {
                            // MANEJO DE ERRORES SEMANTICOS
                            // La instrucción del para debe ser una asignación
                            ErrorC.añadirError(new ErrorC("La instrucción del para debe ser una asignación", inst.getLinea(), Fase.SEMÁNTICO));
                        }
                        RESULT = new Inst("para", exp, c_sents, decl_cap, inst, null, null, decl_capleft, decl_capright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= MIENTRAS PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Inst("mientras", exp, c_sents, null, null, null, null, expleft, expright);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= HACER LLAVE_A C_SENTS LLAVE_C MIENTRAS PAR_A E PAR_C P_COMA 
            {
              Inst RESULT =null;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = new Inst("hacer_mientras", exp, c_sents, null, null, null, null, c_sentsleft, c_sentsright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= ID ASIG E P_COMA 
            {
              Inst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Symbol symbol = tSimbolos.getSymbol(id);
                        ansem.gestAsig(symbol.getTipoReturn(), exp);
                        RESULT = new Inst("asig", id, null, exp, idleft, idright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= ARRAY ASIG E P_COMA 
            {
              Inst RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayG array = (ArrayG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Symbol symbol = tSimbolos.getSymbol(array.getId());
                        ansem.gestAsig(symbol.getTipoReturn(), exp);
                        RESULT = new Inst("asig", array.getId(), array, exp, arrayleft, arrayright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= IMPRIMIR PAR_A E PAR_C P_COMA 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Inst("impr", null, null, exp, expleft, expright);                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INST ::= CALL_FN 
            {
              Inst RESULT =null;
		int call_fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int call_fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call_fn call_fn = (Call_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Symbol symbol = tSimbolos.getSymbol(call_fn.getId());
                        if (symbol.getTipoReturn() != EnumType.VACIO) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // La función no devuelve nada
                            ErrorC.añadirError(new ErrorC("La función devuelve nada", call_fn.getLinea(), Fase.SEMÁNTICO));
                        }
                        RESULT = new Inst("call_fn", null, null, null, null, null, call_fn, call_fnleft, call_fnright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // C_SENTS ::= SENT C_SENTS 
            {
              C_sents RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new C_sents(sent, c_sents, sentleft, sentright);                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // C_SENTS ::= C_SENT C_SENTS 
            {
              C_sents RESULT =null;
		int c_sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sent c_sent = (C_sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new C_sents(c_sent, c_sents, c_sentleft, c_sentright);              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // C_SENTS ::= 
            {
              C_sents RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // C_SENT ::= ROMPER P_COMA 
            {
              C_sent RESULT =null;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new C_sent("Romper", null, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // C_SENT ::= CONTINUAR P_COMA 
            {
              C_sent RESULT =null;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new C_sent("Continuar", null, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // C_SENT ::= RET_PROC 
            {
              C_sent RESULT =null;
		int ret_procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ret_procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetProc ret_proc = (RetProc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ansem.gestReturnFunc(ret_proc);
                       RESULT = new C_sent("ret_proc", ret_proc, ret_procleft, ret_procright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONT_COND ::= SINO LLAVE_A C_SENTS LLAVE_C 
            {
              Cont_cond RESULT =null;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Cont_cond(null, c_sents, null, c_sentsleft, c_sentsright);            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONT_COND ::= SINOSI PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C CONT_COND 
            {
              Cont_cond RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cont_condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cont_condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cont_cond cont_cond = (Cont_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Cont_cond(exp, c_sents, cont_cond, expleft, expright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONT_COND ::= 
            {
              Cont_cond RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TYPE ::= STYPE 
            {
              Type RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new Type(false, stype, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TYPE ::= CONST STYPE 
            {
              Type RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new Type(true, stype, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DASIGNACION ::= ASIG E 
            {
              D_asig RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new D_asig(exp, expleft, expright);                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DASIGNACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DASIGNACION ::= 
            {
              D_asig RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DASIGNACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LID ::= ID COMA LID 
            {
              Lid RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lid lid = (Lid)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lid(id, lid, idleft, idright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LID ::= ID 
            {
              Lid RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lid(id, idleft, idright);                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ENTRADA ::= LEERBOOL 
            {
              Entrada RESULT =null;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new Entrada(EnumType.BOOLEANO, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ENTRADA ::= LEERCAR 
            {
              Entrada RESULT =null;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new Entrada(EnumType.CARACTER, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ENTRADA ::= LEERENT 
            {
              Entrada RESULT =null;
		
                    ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                    RESULT = new Entrada(EnumType.ENTERO, cs.getLeft().getLine(), cs.getLeft().getColumn());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= VALUE OP E 
            {
              Exp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Op op = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(value, op, exp, valueleft, valueright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= VALUE 
            {
              Exp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(value, valueleft, valueright);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= NO E 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ansem.gestExpLogica(exp);
                    RESULT = new Exp(exp, expleft, expright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP ::= Y 
            {
              Op RESULT =null;
		 RESULT = Op.Y;                                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP ::= O 
            {
              Op RESULT =null;
		 RESULT = Op.O;                                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP ::= IGUAL 
            {
              Op RESULT =null;
		 RESULT = Op.IGUAL;                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP ::= IGUALNT 
            {
              Op RESULT =null;
		 RESULT = Op.IGUALNT;                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= MAQ 
            {
              Op RESULT =null;
		 RESULT = Op.MAQ;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= MEQ 
            {
              Op RESULT =null;
		 RESULT = Op.MEQ;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= MAI 
            {
              Op RESULT =null;
		 RESULT = Op.MAI;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP ::= MEI 
            {
              Op RESULT =null;
		 RESULT = Op.MEI;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP ::= SUMA 
            {
              Op RESULT =null;
		 RESULT = Op.SUMA;                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP ::= RESTA 
            {
              Op RESULT =null;
		 RESULT = Op.RESTA;                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP ::= MULT 
            {
              Op RESULT =null;
		 RESULT = Op.MULT;                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP ::= DIV 
            {
              Op RESULT =null;
		 RESULT = Op.DIV;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP ::= MOD 
            {
              Op RESULT =null;
		 RESULT = Op.MOD;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALUE ::= DIGITO 
            {
              Value RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(num, "Ent", numleft, numright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALUE ::= CALL_FN 
            {
              Value RESULT =null;
		int call_fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int call_fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call_fn call_fn = (Call_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Symbol symbol = tSimbolos.getSymbol(call_fn.getId());
                    if (symbol.getTipoReturn() == EnumType.VACIO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // La función no devuelve nada
                        ErrorC.añadirError(new ErrorC("La función no devuelve nada", call_fn.getLinea(), Fase.SEMÁNTICO));
                    }

                    RESULT = new Value(call_fn, call_fnleft, call_fnright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALUE ::= ID 
            {
              Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(id, "Id", idleft, idright);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALUE ::= ARRAY 
            {
              Value RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayG array = (ArrayG)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ansem.gestArray(array.getId(), array.getDimension(), arrayleft);
                    RESULT = new Value(array, arrayleft, arrayright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALUE ::= COMILLAS LETRA COMILLAS 
            {
              Value RESULT =null;
		int letraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int letraright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String letra = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Value(letra, "Car", letraleft, letraright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALUE ::= VAL_BOL 
            {
              Value RESULT =null;
		int val_bolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val_bolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val_bol = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(val_bol, "Bol", val_bolleft, val_bolright);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALUE ::= PAR_A E PAR_C 
            {
              Value RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Value(exp, expleft, expright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALUE ::= ENTRADA 
            {
              Value RESULT =null;
		int entradaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int entradaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Entrada entrada = (Entrada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(entrada, entradaleft, entradaright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARRAY ::= L_ARR ID 
            {
              ArrayG RESULT =null;
		int list_arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list_arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_array list_arr = (L_array)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int nDimensiones = getDimensionesArray(list_arr);
                    RESULT = new ArrayG(id, list_arr, nDimensiones, idleft, idright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // L_ARR ::= CORCHETE_A E CORCHETE_C L_ARR 
            {
              L_array RESULT =null;
		int expArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expArr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int list_arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_array list_array = (L_array)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (ansem.gestExp(expArr) != EnumType.ENTERO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // El índice del array debe ser de tipo entero
                        ErrorC.añadirError(new ErrorC("El indice del array debe ser de tipo entero", expArr.getLinea(), Fase.SEMÁNTICO));
                    }
                    RESULT = new L_array(expArr, list_array, expArrleft, expArrright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // L_ARR ::= CORCHETE_A E CORCHETE_C 
            {
              L_array RESULT =null;
		int expArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp expArr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if (ansem.gestExp(expArr) != EnumType.ENTERO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // El índice del array debe ser de tipo entero
                        ErrorC.añadirError(new ErrorC("El indice del array debe ser de tipo entero", expArr.getLinea(), Fase.SEMÁNTICO));
                    }
                    RESULT = new L_array(expArr, null, expArrleft, expArrright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CALL_FN ::= ID ARGS_CALL 
            {
              Call_fn RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args_Call args_call = (Args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Call_fn(id, args_call, args_callleft, args_callright);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FN",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // M ::= 
            {
              Object RESULT =null;
		 tSimbolos.añadirAmbito();                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
