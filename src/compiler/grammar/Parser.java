
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.grammar;

import java_cup.runtime.*;
import compiler.sintactic.Symbols.*;
import compiler.sintactic.*;
import compiler.sintactic.Symbol;
import compiler.Error;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\003\005\000\002\005" +
    "\007\000\002\004\005\000\002\023\004\000\002\023\002" +
    "\000\002\024\007\000\002\025\005\000\002\025\004\000" +
    "\002\026\006\000\002\026\004\000\002\027\004\000\002" +
    "\027\002\000\002\006\004\000\002\006\002\000\002\007" +
    "\010\000\002\010\005\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\005\000\002\013\004\000\002\015\005\000\002" +
    "\015\004\000\002\014\006\000\002\014\004\000\002\016" +
    "\003\000\002\016\005\000\002\017\004\000\002\017\003" +
    "\000\002\020\005\000\002\021\004\000\002\021\002\000" +
    "\002\022\003\000\002\022\003\000\002\030\006\000\002" +
    "\030\010\000\002\031\012\000\002\031\015\000\002\031" +
    "\011\000\002\031\013\000\002\031\006\000\002\031\007" +
    "\000\002\032\004\000\002\032\004\000\002\032\002\000" +
    "\002\033\004\000\002\033\004\000\002\034\006\000\002" +
    "\034\012\000\002\034\002\000\002\035\003\000\002\035" +
    "\004\000\002\036\004\000\002\036\002\000\002\037\005" +
    "\000\002\037\003\000\002\040\005\000\002\040\003\000" +
    "\002\040\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\041\005\000\002\041\003\000\002\041" +
    "\003\000\002\042\005\000\002\042\003\000\002\042\005" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\005\000\002\050\004\000\002\044\003\000\002" +
    "\044\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\002\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\016\013\uffa9\014\uffa9\015\uffa9\016\uffa9\025" +
    "\uffa9\060\uffa9\001\002\000\004\002\276\001\002\000\004" +
    "\025\uffa9\001\002\000\016\013\014\014\016\015\007\016" +
    "\ufff5\025\ufff5\060\013\001\002\000\010\013\014\014\016" +
    "\060\013\001\002\000\006\016\112\025\ufffc\001\002\000" +
    "\004\056\uffcc\001\002\000\016\013\014\014\016\015\007" +
    "\016\ufff5\025\ufff5\060\013\001\002\000\004\056\uffec\001" +
    "\002\000\004\056\uffee\001\002\000\004\056\017\001\002" +
    "\000\004\056\uffed\001\002\000\012\042\uffc7\047\101\051" +
    "\100\053\uffc7\001\002\000\006\042\022\053\uffc9\001\002" +
    "\000\004\053\077\001\002\000\022\022\026\023\030\024" +
    "\024\043\025\052\033\055\023\056\034\057\036\001\002" +
    "\000\036\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\044\uffba\053\uffba\001\002\000\006\044\uffc3\053\uffc3\001" +
    "\002\000\022\022\026\023\030\024\024\043\025\052\033" +
    "\055\023\056\034\057\036\001\002\000\006\044\uffc1\053" +
    "\uffc1\001\002\000\006\044\uffc4\053\uffc4\001\002\000\006" +
    "\044\uffc2\053\uffc2\001\002\000\012\033\073\034\072\044" +
    "\uffc5\053\uffc5\001\002\000\036\026\065\027\062\030\064" +
    "\031\066\032\063\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\044\uffbc\053\uffbc\001\002\000\004" +
    "\060\060\001\002\000\040\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\043\050\044\uffb8\053\uffb8\001\002\000" +
    "\036\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\044" +
    "\uffb9\053\uffb9\001\002\000\012\033\uffbe\034\uffbe\044\uffbe" +
    "\053\uffbe\001\002\000\024\033\uffbf\034\uffbf\035\044\036" +
    "\045\037\041\040\042\041\046\044\uffbf\053\uffbf\001\002" +
    "\000\004\053\uffca\001\002\000\014\043\uffb1\052\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\001\002\000\014\043\uffb0\052\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\001\002\000\014\043\025\052" +
    "\033\055\023\056\034\057\036\001\002\000\014\043\uffb3" +
    "\052\uffb3\055\uffb3\056\uffb3\057\uffb3\001\002\000\014\043" +
    "\uffb2\052\uffb2\055\uffb2\056\uffb2\057\uffb2\001\002\000\014" +
    "\043\uffaf\052\uffaf\055\uffaf\056\uffaf\057\uffaf\001\002\000" +
    "\012\033\uffc0\034\uffc0\044\uffc0\053\uffc0\001\002\000\006" +
    "\044\053\056\052\001\002\000\036\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\044\uffb6\053\uffb6\001\002\000" +
    "\006\044\uffe5\051\056\001\002\000\036\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\044\uffe8\053\uffe8\001\002" +
    "\000\004\044\055\001\002\000\036\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\044\uffe9\053\uffe9\001\002\000" +
    "\004\056\052\001\002\000\004\044\uffe4\001\002\000\004" +
    "\052\061\001\002\000\036\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\044\uffb7\053\uffb7\001\002\000\012\043" +
    "\uffad\052\uffad\055\uffad\056\uffad\001\002\000\012\043\uffaa" +
    "\052\uffaa\055\uffaa\056\uffaa\001\002\000\012\043\uffac\052" +
    "\uffac\055\uffac\056\uffac\001\002\000\012\043\uffae\052\uffae" +
    "\055\uffae\056\uffae\001\002\000\012\043\uffab\052\uffab\055" +
    "\uffab\056\uffab\001\002\000\012\043\025\052\033\055\023" +
    "\056\034\001\002\000\024\033\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\044\uffbd\053\uffbd\001\002" +
    "\000\022\022\026\023\030\024\024\043\025\052\033\055" +
    "\023\056\034\057\036\001\002\000\022\022\uffb4\023\uffb4" +
    "\024\uffb4\043\uffb4\052\uffb4\055\uffb4\056\uffb4\057\uffb4\001" +
    "\002\000\022\022\uffb5\023\uffb5\024\uffb5\043\uffb5\052\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\001\002\000\006\044\uffc6\053" +
    "\uffc6\001\002\000\004\044\076\001\002\000\024\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\044" +
    "\uffbb\053\uffbb\001\002\000\046\004\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\025\uffdc\044\uffdc\046\uffdc\053\uffdc" +
    "\056\uffdc\060\uffdc\001\002\000\004\056\105\001\002\000" +
    "\004\055\102\001\002\000\004\050\103\001\002\000\004" +
    "\053\104\001\002\000\046\004\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\025\uffdb\044\uffdb\046\uffdb\053\uffdb\056" +
    "\uffdb\060\uffdb\001\002\000\010\042\uffc7\051\100\053\uffc7" +
    "\001\002\000\006\042\uffc8\053\uffc8\001\002\000\006\016" +
    "\ufff6\025\ufff6\001\002\000\004\025\ufffe\001\002\000\006" +
    "\016\112\025\ufffc\001\002\000\012\013\014\014\016\054" +
    "\115\060\013\001\002\000\004\056\ufff0\001\002\000\004" +
    "\056\116\001\002\000\004\056\uffef\001\002\000\004\043" +
    "\117\001\002\000\012\013\014\014\016\044\122\060\013" +
    "\001\002\000\004\053\121\001\002\000\006\016\ufffb\025" +
    "\ufffb\001\002\000\004\053\ufff9\001\002\000\004\056\126" +
    "\001\002\000\004\044\125\001\002\000\004\053\ufffa\001" +
    "\002\000\006\044\ufff7\051\127\001\002\000\010\013\014" +
    "\014\016\060\013\001\002\000\004\044\ufff8\001\002\000" +
    "\004\025\ufffd\001\002\000\004\056\uffcb\001\002\000\006" +
    "\002\ufff3\016\uffa9\001\002\000\004\025\135\001\002\000" +
    "\004\045\136\001\002\000\032\004\151\007\150\010\145" +
    "\011\144\013\014\014\016\015\007\017\uffdf\021\146\046" +
    "\uffdf\056\143\060\013\001\002\000\004\046\251\001\002" +
    "\000\036\004\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\046\uffdd" +
    "\056\uffdd\060\uffdd\001\002\000\032\004\151\007\150\010" +
    "\145\011\144\013\014\014\016\015\007\017\uffdf\021\146" +
    "\046\uffdf\056\143\060\013\001\002\000\036\004\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\017\uffde\020\uffde\021\uffde\046\uffde\056\uffde\060\uffde\001" +
    "\002\000\004\042\245\001\002\000\004\045\235\001\002" +
    "\000\004\043\227\001\002\000\004\043\223\001\002\000" +
    "\006\017\220\046\uffe2\001\002\000\004\043\205\001\002" +
    "\000\004\043\152\001\002\000\022\022\026\023\030\024" +
    "\024\043\025\052\033\055\023\056\034\057\036\001\002" +
    "\000\004\044\154\001\002\000\004\045\155\001\002\000" +
    "\034\004\151\007\150\010\145\011\144\012\156\013\014" +
    "\014\016\015\007\020\162\021\146\046\uffd2\056\143\060" +
    "\013\001\002\000\004\053\204\001\002\000\004\046\166" +
    "\001\002\000\034\004\151\007\150\010\145\011\144\012" +
    "\156\013\014\014\016\015\007\020\162\021\146\046\uffd2" +
    "\056\143\060\013\001\002\000\034\004\151\007\150\010" +
    "\145\011\144\012\156\013\014\014\016\015\007\020\162" +
    "\021\146\046\uffd2\056\143\060\013\001\002\000\004\053" +
    "\163\001\002\000\034\004\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\020\uffd0\021\uffd0\046" +
    "\uffd0\056\uffd0\060\uffd0\001\002\000\004\046\uffd3\001\002" +
    "\000\004\046\uffd4\001\002\000\042\004\uffcd\005\170\006" +
    "\171\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\017\uffcd\020\uffcd\021\uffcd\046\uffcd\056\uffcd\060" +
    "\uffcd\001\002\000\036\004\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda\020\uffda\021" +
    "\uffda\046\uffda\056\uffda\060\uffda\001\002\000\004\045\201" +
    "\001\002\000\004\043\172\001\002\000\022\022\026\023" +
    "\030\024\024\043\025\052\033\055\023\056\034\057\036" +
    "\001\002\000\004\044\174\001\002\000\004\045\175\001" +
    "\002\000\030\004\151\007\150\010\145\011\144\013\014" +
    "\014\016\015\007\021\146\046\uffdf\056\143\060\013\001" +
    "\002\000\004\046\177\001\002\000\042\004\uffcd\005\170" +
    "\006\171\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\046\uffcd\056\uffcd" +
    "\060\uffcd\001\002\000\036\004\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\017\uffce\020\uffce" +
    "\021\uffce\046\uffce\056\uffce\060\uffce\001\002\000\030\004" +
    "\151\007\150\010\145\011\144\013\014\014\016\015\007" +
    "\021\146\046\uffdf\056\143\060\013\001\002\000\004\046" +
    "\203\001\002\000\036\004\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\046\uffcf\056\uffcf\060\uffcf\001\002\000\034\004\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\020\uffd1\021\uffd1\046\uffd1\056\uffd1\060\uffd1\001\002" +
    "\000\012\013\014\014\016\015\007\060\013\001\002\000" +
    "\004\053\207\001\002\000\022\022\026\023\030\024\024" +
    "\043\025\052\033\055\023\056\034\057\036\001\002\000" +
    "\004\053\211\001\002\000\012\013\014\014\016\015\007" +
    "\060\013\001\002\000\004\044\213\001\002\000\004\045" +
    "\214\001\002\000\034\004\151\007\150\010\145\011\144" +
    "\012\156\013\014\014\016\015\007\020\162\021\146\046" +
    "\uffd2\056\143\060\013\001\002\000\004\046\216\001\002" +
    "\000\036\004\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\046\uffd9" +
    "\056\uffd9\060\uffd9\001\002\000\004\046\uffe3\001\002\000" +
    "\022\022\026\023\030\024\024\043\025\052\033\055\023" +
    "\056\034\057\036\001\002\000\004\053\222\001\002\000" +
    "\004\046\uffe1\001\002\000\022\022\026\023\030\024\024" +
    "\043\025\052\033\055\023\056\034\057\036\001\002\000" +
    "\004\044\225\001\002\000\004\053\226\001\002\000\036" +
    "\004\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\046\uffd5\056\uffd5" +
    "\060\uffd5\001\002\000\022\022\026\023\030\024\024\043" +
    "\025\052\033\055\023\056\034\057\036\001\002\000\004" +
    "\044\231\001\002\000\004\045\232\001\002\000\034\004" +
    "\151\007\150\010\145\011\144\012\156\013\014\014\016" +
    "\015\007\020\162\021\146\046\uffd2\056\143\060\013\001" +
    "\002\000\004\046\234\001\002\000\036\004\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\046\uffd8\056\uffd8\060\uffd8\001\002" +
    "\000\034\004\151\007\150\010\145\011\144\012\156\013" +
    "\014\014\016\015\007\020\162\021\146\046\uffd2\056\143" +
    "\060\013\001\002\000\004\046\237\001\002\000\004\010" +
    "\240\001\002\000\004\043\241\001\002\000\022\022\026" +
    "\023\030\024\024\043\025\052\033\055\023\056\034\057" +
    "\036\001\002\000\004\044\243\001\002\000\004\053\244" +
    "\001\002\000\036\004\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\046\uffd7\056\uffd7\060\uffd7\001\002\000\022\022\026\023" +
    "\030\024\024\043\025\052\033\055\023\056\034\057\036" +
    "\001\002\000\004\053\247\001\002\000\036\004\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\046\uffd6\056\uffd6\060\uffd6\001" +
    "\002\000\006\017\uffe0\046\uffe0\001\002\000\006\002\uffff" +
    "\016\uffff\001\002\000\006\002\ufff3\016\uffa9\001\002\000" +
    "\004\002\000\001\002\000\004\016\255\001\002\000\012" +
    "\013\014\014\016\054\115\060\013\001\002\000\004\045" +
    "\272\001\002\000\004\056\260\001\002\000\004\043\261" +
    "\001\002\000\012\013\014\014\016\044\263\060\013\001" +
    "\002\000\004\045\ufff1\001\002\000\004\045\uffea\001\002" +
    "\000\004\056\267\001\002\000\004\044\266\001\002\000" +
    "\004\045\uffeb\001\002\000\006\044\uffe6\051\270\001\002" +
    "\000\010\013\014\014\016\060\013\001\002\000\004\044" +
    "\uffe7\001\002\000\032\004\151\007\150\010\145\011\144" +
    "\013\014\014\016\015\007\017\uffdf\021\146\046\uffdf\056" +
    "\143\060\013\001\002\000\004\046\274\001\002\000\006" +
    "\002\ufff2\016\ufff2\001\002\000\004\002\ufff4\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\010\002\005\003\003\004\004\001\001\000" +
    "\002\001\001\000\006\002\133\005\132\001\001\000\012" +
    "\012\010\027\007\030\011\035\014\001\001\000\004\012" +
    "\131\001\001\000\006\023\107\024\110\001\001\000\002" +
    "\001\001\000\012\012\010\027\106\030\011\035\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\020\001\001\000\002\001\001\000\016\040\037\041\030" +
    "\042\036\043\026\047\031\050\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\040\074\041\030\042\036" +
    "\043\026\047\031\050\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\070\001\001" +
    "\000\004\046\066\001\001\000\002\001\001\000\004\015" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\041\046\042\036\047\031\050\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\042\067\047\031\050\034\001" +
    "\001\000\002\001\001\000\016\040\073\041\030\042\036" +
    "\043\026\047\031\050\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\130\024\110\001\001" +
    "\000\006\011\113\012\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\117\001\001" +
    "\000\006\012\122\026\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\122\026\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\253\006\252\007\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\010" +
    "\017\136\021\146\022\140\030\141\031\137\035\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\010" +
    "\021\247\022\140\030\141\031\137\035\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\040\152\041\030" +
    "\042\036\043\026\047\031\050\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\010\022\157\030\141" +
    "\031\137\032\156\033\160\035\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\010\022\157\030\141" +
    "\031\137\032\164\033\160\035\014\001\001\000\020\012" +
    "\010\022\157\030\141\031\137\032\163\033\160\035\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\040" +
    "\172\041\030\042\036\043\026\047\031\050\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\010\021" +
    "\175\022\140\030\141\031\137\035\014\001\001\000\002" +
    "\001\001\000\004\034\177\001\001\000\002\001\001\000" +
    "\016\012\010\021\201\022\140\030\141\031\137\035\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\010\030\205\035\014\001\001\000\002" +
    "\001\001\000\016\040\207\041\030\042\036\043\026\047" +
    "\031\050\034\001\001\000\002\001\001\000\010\012\010" +
    "\030\211\035\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\010\022\157\030\141\031\137\032\214" +
    "\033\160\035\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\040\220\041\030\042\036" +
    "\043\026\047\031\050\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\040\223\041\030\042\036\043\026" +
    "\047\031\050\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\040\227\041\030\042\036" +
    "\043\026\047\031\050\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\010\022\157\030\141\031\137" +
    "\032\232\033\160\035\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\010\022\157\030\141\031\137" +
    "\032\235\033\160\035\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\040\241\041\030" +
    "\042\036\043\026\047\031\050\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\040\245" +
    "\041\030\042\036\043\026\047\031\050\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\253\006\274\007\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\255\011\256" +
    "\012\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\261\001\001\000\006\012\263\014\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\263\014\270\001\001\000\002\001\001\000\020\012" +
    "\010\017\272\021\146\022\140\030\141\031\137\035\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }
***/
    TSimbolos tSimbolos = new TSimbolos();

    public TSimbolos getTSimbolos() {
        return tSimbolos;
    }

    public TypeF stypetoTypeF(SType stype) {
        switch (stype) {
            case ENTERO:
                return TypeF.ENTERO;
            case BOOLEANO:
                return TypeF.BOOLEANO;
            case CARACTER:
                return TypeF.CARACTER;
            default:
                return null;
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= XAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Xava start_val = (Xava)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // XAVA ::= DECLGLOB MAIN_FN FUNCIONES 
            {
              Xava RESULT =null;
		int gdeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gdeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclGlob gdecls = (DeclGlob)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Main_fn main = (Main_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Funciones funciones = (Funciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Xava(gdecls, main, funciones, 0, 0);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("XAVA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN_FN ::= M PRINCIPAL LLAVE_A FSENTS LLAVE_C 
            {
              Main_fn RESULT =null;
		int fsentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FSents fsents = (FSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Main_fn(fsents, fsentsleft, fsentsright);                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_FN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLGLOB ::= M DECLS DECLSF 
            {
              DeclGlob RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclsF declsf = (DeclsF)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclGlob(declsf, decls, declsleft, declsright);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLGLOB",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLSF ::= DECLF DECLSF 
            {
              DeclsF RESULT =null;
		int declfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclF declf = (DeclF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclsF declsf = (DeclsF)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclsF(declf, declsf, declfleft, declfright);                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLSF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLSF ::= 
            {
              DeclsF RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLSF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLF ::= FUNCION TYPEF ID ARGS_DECLF P_COMA 
            {
              DeclF RESULT =null;
		int typeFleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeFright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeF typeF = (TypeF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int args_declfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int args_declfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Args_Declf args_declf = (Args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  if (tSimbolos.ponerSimbolo(new Symbol(id, TipoElemento.FUNCION, typeF, null, true, 0, idleft))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la función ha sido declarada anteriormente o el nombre de la función ya está usada
                            Error.añadirError(new Error("Función declarada previamente", idleft, Fase.SEMÁNTICO));
                        }

                        RESULT = new DeclF(typeF, id, args_declf, typeFleft, typeFright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLF",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARGS_DECLF ::= PAR_A L_ARGS_DECLF PAR_C 
            {
              Args_Declf RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Declf args = (L_args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Declf(args, argsleft, argsright);                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_DECLF",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ARGS_DECLF ::= PAR_A PAR_C 
            {
              Args_Declf RESULT =null;
		 RESULT = new Args_Declf(null, cur_token.left, cur_token.right);                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_DECLF",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_ARGS_DECLF ::= STYPE ID COMA L_ARGS_DECLF 
            {
              L_args_Declf RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Declf args = (L_args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (tSimbolos.ponerSimbolo(new Symbol(id, TipoElemento.PARAMETRO, stypetoTypeF(stype), null, false, 0, idleft))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                            Error.añadirError(new Error("Variable declarada previamente", idleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new L_args_Declf(stype, id, args, stypeleft, styperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_DECLF",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_ARGS_DECLF ::= STYPE ID 
            {
              L_args_Declf RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if (tSimbolos.ponerSimbolo(new Symbol(id, TipoElemento.PARAMETRO, stypetoTypeF(stype), null, false, 0, idleft))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                            Error.añadirError(new Error("Variable declarada previamente", idleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new L_args_Declf(stype, id, stypeleft, styperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_DECLF",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLS ::= DECL DECLS 
            {
              Decls RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decls(decl, decls, declleft, declright);                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLS ::= 
            {
              Decls RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES ::= FUNCIONG FUNCIONES 
            {
              Funciones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncionG f = (FuncionG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Funciones funciones = (Funciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Funciones(f, funciones, fleft,fright);                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES ::= 
            {
              Funciones RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCIONG ::= M FUNCION CAP LLAVE_A FSENTS LLAVE_C 
            {
              FuncionG RESULT =null;
		int capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Cap cap = (Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int f_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int f_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FSents f_sents = (FSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncionG(cap, f_sents, capleft, capright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONG",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CAP ::= TYPEF ID ARGS_CAP 
            {
              Cap RESULT =null;
		int typefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeF typef = (TypeF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int args_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int args_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args_Cap args_cap = (Args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cap(typef, id, args_cap, typefleft, typefright);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPEF ::= STYPE 
            {
              TypeF RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stypetoTypeF(stype);                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPEF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPEF ::= VACIO 
            {
              TypeF RESULT =null;
		 RESULT = TypeF.VACIO;                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPEF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STYPE ::= ENTERO 
            {
              SType RESULT =null;
		 RESULT = SType.ENTERO;                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STYPE ::= BOOLEANO 
            {
              SType RESULT =null;
		 RESULT = SType.BOOLEANO;                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STYPE ::= CARACTER 
            {
              SType RESULT =null;
		 RESULT = SType.CARACTER;                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGS_CAP ::= PAR_A L_ARGS_CAP PAR_C 
            {
              Args_Cap RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Cap args = (L_args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Cap(args, argsleft, argsright);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CAP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGS_CAP ::= PAR_A PAR_C 
            {
              Args_Cap RESULT =null;
		 RESULT = new Args_Cap(null, cur_token.left, cur_token.right);                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CAP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGS_CALL ::= PAR_A L_ARGS_CALL PAR_C 
            {
              Args_Call RESULT =null;
		int l_args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l_args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Call l_args_call = (L_args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Call(l_args_call, l_args_callleft, l_args_callright);      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CALL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGS_CALL ::= PAR_A PAR_C 
            {
              Args_Call RESULT =null;
		 RESULT = new Args_Call(null, cur_token.left, cur_token.right);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CALL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_ARGS_CAP ::= STYPE ID COMA L_ARGS_CAP 
            {
              L_args_Cap RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_args_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_args_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Cap l_args_cap = (L_args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Cap(stype, id, l_args_cap, stypeleft, styperight);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_ARGS_CAP ::= STYPE ID 
            {
              L_args_Cap RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Cap(stype, id, stypeleft, styperight);                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_ARGS_CALL ::= ID 
            {
              L_args_Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Call(id, idleft, idright);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L_ARGS_CALL ::= ID COMA L_ARGS_CALL 
            {
              L_args_Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Call l_args_call = (L_args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Call(id, l_args_call, idleft, idright);                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FSENTS ::= SENTS RET_PROC 
            {
              FSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ret_procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ret_procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetProc ret_proc = (RetProc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FSents(sents, ret_proc, sentsleft, sentsright);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FSENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FSENTS ::= SENTS 
            {
              FSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FSents(sents, sentsleft, sentsright);                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FSENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RET_PROC ::= DEVUELVE E P_COMA 
            {
              RetProc RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RetProc(exp, expleft, expright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RET_PROC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTS ::= SENT SENTS 
            {
              Sents RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sents(sent, sents, sentleft, sentright);                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTS ::= 
            {
              Sents RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= DECL 
            {
              Sent RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sent(decl, declleft, declright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= INST 
            {
              Sent RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sent(inst, instleft, instright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECL ::= TYPE LID DASIGNACION P_COMA 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Lid lid = (Lid)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int d_asignacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int d_asignacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		D_asig d_asignacion = (D_asig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        for (Lid aux = lid; aux != null; aux = aux.getLid()) {
                            if (tSimbolos.ponerSimbolo(new Symbol(aux.getId(), TipoElemento.VARIABLE, stypetoTypeF(type.getStype()), null, type.getConstante(), 0, lidleft))) {
                                // MANEJO DE ERRORES SEMANTICOS
                                // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                                Error.añadirError(new Error("Variable declarada previamente", aux.getLinea(), Fase.SEMÁNTICO));
                            }
                        }
                        RESULT = new Decl(type, lid, d_asignacion, typeleft, typeright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECL ::= TYPE ID CORCHETE_A DIGITO CORCHETE_C P_COMA 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        if (!type.getConstante()) {

                            if (tSimbolos.ponerSimbolo(new Symbol(id, TipoElemento.ARRAY, stypetoTypeF(type.getStype()), null, false, Integer.parseInt(num), idleft))) {
                                // MANEJO DE ERRORES SEMANTICOS
                                // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                                Error.añadirError(new Error("Variable declarada previamente", idleft, Fase.SEMÁNTICO));
                            }
                            RESULT = new Decl(type, id, num, typeleft, typeright);
                        } else {
                            // MANEJO DE ERRORES SEMANTICOS
                            // No se puede declarar un array de tipo constante
                            Error.añadirError(new Error("Un array no puede ser constante", idleft, Fase.SEMÁNTICO));
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= SI PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C CONT_COND 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cont_condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cont_condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cont_cond cont_cond = (Cont_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Inst("cond", exp, c_sents, null, null, cont_cond, expleft, expright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST ::= PARA PAR_A DECL P_COMA E P_COMA DECL PAR_C LLAVE_A C_SENTS LLAVE_C 
            {
              Inst RESULT =null;
		int decl_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int decl_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Decl decl_cap = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Inst("para", exp, c_sents, decl_cap, decl, null, decl_capleft, decl_capright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= MIENTRAS PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Inst("mientras", exp, c_sents, null, null, null, expleft, expright);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= HACER LLAVE_A C_SENTS LLAVE_C MIENTRAS PAR_A E PAR_C P_COMA 
            {
              Inst RESULT =null;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = new Inst("hacer_mientras", exp, c_sents, null, null, null, c_sentsleft, c_sentsright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= ID ASIG E P_COMA 
            {
              Inst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Inst("asig", id, exp, idleft, idright);                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= IMPRIMIR PAR_A E PAR_C P_COMA 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Inst("impr", null, exp, expleft, expright);                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // C_SENTS ::= SENT C_SENTS 
            {
              C_sents RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new C_sents(sent, c_sents, sentleft, sentright);                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // C_SENTS ::= C_SENT C_SENTS 
            {
              C_sents RESULT =null;
		int c_sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sent c_sent = (C_sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new C_sents(c_sent, c_sents, c_sentleft, c_sentright);              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // C_SENTS ::= 
            {
              C_sents RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // C_SENT ::= ROMPER P_COMA 
            {
              C_sent RESULT =null;
		 RESULT = C_sent.ROMPER;                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // C_SENT ::= CONTINUAR P_COMA 
            {
              C_sent RESULT =null;
		 RESULT = C_sent.CONTINUAR;                                                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONT_COND ::= SINO LLAVE_A SENTS LLAVE_C 
            {
              Cont_cond RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Cont_cond(null, sents, null, sentsleft, sentsright);            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONT_COND ::= SINOSI PAR_A E PAR_C LLAVE_A SENTS LLAVE_C CONT_COND 
            {
              Cont_cond RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cont_condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cont_condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cont_cond cont_cond = (Cont_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Cont_cond(exp, sents, cont_cond, expleft, expright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONT_COND ::= 
            {
              Cont_cond RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TYPE ::= STYPE 
            {
              Type RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(false, stype, stypeleft, styperight);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TYPE ::= CONST STYPE 
            {
              Type RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(true, stype, stypeleft, styperight);                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DASIGNACION ::= ASIG E 
            {
              D_asig RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new D_asig(exp, expleft, expright);                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DASIGNACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DASIGNACION ::= 
            {
              D_asig RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DASIGNACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LID ::= ID COMA LID 
            {
              Lid RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lid lid = (Lid)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lid(id, lid, idleft, idright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LID ::= ID 
            {
              Lid RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lid(id, idleft, idright);                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= ECOMP OPLOG E 
            {
              Exp RESULT =null;
		int ecompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Ecomp ecomp = (Ecomp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpLog oplog = (OpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(ecomp, oplog, exp, ecompleft, ecompright);                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= ECOMP 
            {
              Exp RESULT =null;
		int ecompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ecomp ecomp = (Ecomp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(ecomp, ecompleft, ecompright);                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= ENTRADA 
            {
              Exp RESULT =null;
		int entradaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int entradaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Entrada entrada = (Entrada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(entrada, entradaleft, entradaright);                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ENTRADA ::= LEERBOOL 
            {
              Entrada RESULT =null;
		 RESULT = Entrada.LEERBOOL;                                                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ENTRADA ::= LEERCAR 
            {
              Entrada RESULT =null;
		 RESULT = Entrada.LEERCAR;                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ENTRADA ::= LEERENT 
            {
              Entrada RESULT =null;
		 RESULT = Entrada.LEERENT;                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ECOMP ::= EARIT OPCOMP ECOMP 
            {
              Ecomp RESULT =null;
		int earitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Earit earit = (Earit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpComp opcomp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ecompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ecomp ecomp = (Ecomp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ecomp(earit, opcomp, ecomp, earitleft, earitright);             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECOMP",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ECOMP ::= EARIT 
            {
              Ecomp RESULT =null;
		int earitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Earit earit = (Earit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ecomp(earit, earitleft, earitright);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECOMP",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ECOMP ::= VAL_BOL 
            {
              Ecomp RESULT =null;
		int val_bolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val_bolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val_bol = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ecomp(val_bol, val_bolleft, val_bolright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECOMP",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EARIT ::= VALUE OPARIT EARIT 
            {
              Earit RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpArit oparit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int earitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Earit earit = (Earit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Earit(value, oparit, earit, valueleft, valueright);             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EARIT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EARIT ::= VALUE 
            {
              Earit RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Earit(value, valueleft, valueright);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EARIT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EARIT ::= PAR_A E PAR_C 
            {
              Earit RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Earit(exp, expleft, expright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EARIT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALUE ::= DIGITO 
            {
              Value RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(num, numleft, numright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALUE ::= CALL_FN 
            {
              Value RESULT =null;
		int call_fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int call_fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call_fn call_fn = (Call_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(call_fn, call_fnleft, call_fnright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALUE ::= ID 
            {
              Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(id, null, idleft, idright);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALUE ::= COMILLAS CARACTER COMILLAS 
            {
              Value RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Value(car, null, null, carleft, carright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CALL_FN ::= ID ARGS_CALL 
            {
              Call_fn RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args_Call args_call = (Args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Call_fn(id, args_call, args_callleft, args_callright);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FN",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPLOG ::= Y 
            {
              OpLog RESULT =null;
		 RESULT = OpLog.Y;                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOG",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPLOG ::= O 
            {
              OpLog RESULT =null;
		 RESULT = OpLog.O;                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOG",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPCOMP ::= IGUAL 
            {
              OpComp RESULT =null;
		 RESULT = OpComp.IGUAL;                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPCOMP ::= MAQ 
            {
              OpComp RESULT =null;
		 RESULT = OpComp.MAQ;                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPCOMP ::= MEQ 
            {
              OpComp RESULT =null;
		 RESULT = OpComp.MEQ;                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPCOMP ::= MAI 
            {
              OpComp RESULT =null;
		 RESULT = OpComp.MAI;                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPCOMP ::= MEI 
            {
              OpComp RESULT =null;
		 RESULT = OpComp.MEI;                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPARIT ::= SUMA 
            {
              OpArit RESULT =null;
		 RESULT = OpArit.SUMA;                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPARIT ::= RESTA 
            {
              OpArit RESULT =null;
		 RESULT = OpArit.RESTA;                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPARIT ::= MULT 
            {
              OpArit RESULT =null;
		 RESULT = OpArit.MULT;                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPARIT ::= DIV 
            {
              OpArit RESULT =null;
		 RESULT = OpArit.DIV;                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPARIT ::= MOD 
            {
              OpArit RESULT =null;
		 RESULT = OpArit.MOD;                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // M ::= 
            {
              Object RESULT =null;
		 tSimbolos.añadirAmbito();                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
