
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.grammar;

import java_cup.runtime.*;
import compiler.sintactic.Symbols.*;
import compiler.sintactic.*;
import compiler.sintactic.Symbol;
import compiler.ErrorC;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\003\005\000\002\005" +
    "\007\000\002\004\004\000\002\023\004\000\002\023\002" +
    "\000\002\024\010\000\002\025\005\000\002\025\004\000" +
    "\002\026\006\000\002\026\004\000\002\027\004\000\002" +
    "\027\002\000\002\006\004\000\002\006\002\000\002\007" +
    "\007\000\002\010\005\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\005\000\002\013\004\000\002\015\005\000\002" +
    "\015\004\000\002\014\006\000\002\014\004\000\002\016" +
    "\003\000\002\016\005\000\002\017\004\000\002\017\003" +
    "\000\002\020\005\000\002\021\004\000\002\021\002\000" +
    "\002\022\003\000\002\022\003\000\002\030\006\000\002" +
    "\030\010\000\002\031\012\000\002\031\015\000\002\031" +
    "\011\000\002\031\013\000\002\031\006\000\002\031\011" +
    "\000\002\031\007\000\002\032\004\000\002\032\004\000" +
    "\002\032\002\000\002\033\004\000\002\033\004\000\002" +
    "\033\003\000\002\034\006\000\002\034\012\000\002\034" +
    "\002\000\002\035\003\000\002\035\004\000\002\036\004" +
    "\000\002\036\002\000\002\037\005\000\002\037\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\040\005\000\002\040\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\006\000\002\043\005" +
    "\000\002\043\003\000\002\043\005\000\002\043\003\000" +
    "\002\044\004\000\002\002\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\016\013\005\014\004\015\015\016\ufff5\025" +
    "\ufff5\061\014\001\002\000\004\057\uffed\001\002\000\004" +
    "\057\uffee\001\002\000\004\057\uffca\001\002\000\004\002" +
    "\302\001\002\000\006\016\uffa9\025\ufffc\001\002\000\004" +
    "\057\244\001\002\000\016\013\005\014\004\015\015\016" +
    "\ufff5\025\ufff5\061\014\001\002\000\004\025\uffa9\001\002" +
    "\000\004\057\uffec\001\002\000\010\013\005\014\004\061" +
    "\014\001\002\000\004\057\uffc9\001\002\000\006\002\ufff3" +
    "\016\217\001\002\000\004\025\021\001\002\000\004\046" +
    "\022\001\002\000\032\004\035\007\034\010\031\011\030" +
    "\013\005\014\004\015\015\017\uffdf\021\032\047\uffdf\057" +
    "\026\061\014\001\002\000\004\047\215\001\002\000\036" +
    "\004\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\047\uffdd\057\uffdd" +
    "\061\uffdd\001\002\000\032\004\035\007\034\010\031\011" +
    "\030\013\005\014\004\015\015\017\uffdf\021\032\047\uffdf" +
    "\057\026\061\014\001\002\000\006\043\203\050\204\001" +
    "\002\000\036\004\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\017\uffde\020\uffde\021\uffde\047" +
    "\uffde\057\uffde\061\uffde\001\002\000\004\046\173\001\002" +
    "\000\004\044\165\001\002\000\004\044\161\001\002\000" +
    "\006\017\055\047\uffe2\001\002\000\004\044\146\001\002" +
    "\000\004\044\036\001\002\000\022\022\042\023\044\024" +
    "\037\044\041\053\047\056\040\057\046\060\051\001\002" +
    "\000\042\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\045\uffc4\051\uffc4\054\uffc4\001\002\000\042\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\045" +
    "\uffb2\051\uffb2\054\uffb2\001\002\000\022\022\042\023\044" +
    "\024\037\044\041\053\047\056\040\057\046\060\051\001" +
    "\002\000\042\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\045\uffc2\051\uffc2\054\uffc2\001\002\000\042" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\045\uffab\051\uffab\054\uffab\001\002\000\042\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\045\uffc3\051" +
    "\uffc3\054\uffc3\001\002\000\042\026\127\027\141\030\132" +
    "\031\136\032\131\033\126\034\133\035\137\036\140\037" +
    "\135\040\130\041\142\042\134\045\uffc0\051\uffc0\054\uffc0" +
    "\001\002\000\046\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\044\112\045\uffb0\050\114\051\uffb0\054" +
    "\uffb0\001\002\000\004\061\110\001\002\000\042\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\045\uffb1" +
    "\051\uffb1\054\uffb1\001\002\000\042\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\045\uffad\051\uffad\054" +
    "\uffad\001\002\000\004\045\053\001\002\000\004\046\054" +
    "\001\002\000\036\004\035\007\034\010\031\011\030\012" +
    "\056\013\005\014\004\015\015\017\055\020\063\021\032" +
    "\047\uffd1\057\026\061\014\001\002\000\022\022\042\023" +
    "\044\024\037\044\041\053\047\056\040\057\046\060\051" +
    "\001\002\000\004\054\105\001\002\000\004\047\067\001" +
    "\002\000\036\004\035\007\034\010\031\011\030\012\056" +
    "\013\005\014\004\015\015\017\055\020\063\021\032\047" +
    "\uffd1\057\026\061\014\001\002\000\036\004\035\007\034" +
    "\010\031\011\030\012\056\013\005\014\004\015\015\017" +
    "\055\020\063\021\032\047\uffd1\057\026\061\014\001\002" +
    "\000\036\004\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\017\uffce\020\uffce\021\uffce\047\uffce" +
    "\057\uffce\061\uffce\001\002\000\004\054\064\001\002\000" +
    "\036\004\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\047\uffcf\057" +
    "\uffcf\061\uffcf\001\002\000\004\047\uffd2\001\002\000\004" +
    "\047\uffd3\001\002\000\042\004\uffcb\005\071\006\072\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\047\uffcb\057\uffcb\061\uffcb\001" +
    "\002\000\036\004\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\017\uffda\020\uffda\021\uffda\047" +
    "\uffda\057\uffda\061\uffda\001\002\000\004\046\102\001\002" +
    "\000\004\044\073\001\002\000\022\022\042\023\044\024" +
    "\037\044\041\053\047\056\040\057\046\060\051\001\002" +
    "\000\004\045\075\001\002\000\004\046\076\001\002\000" +
    "\030\004\035\007\034\010\031\011\030\013\005\014\004" +
    "\015\015\021\032\047\uffdf\057\026\061\014\001\002\000" +
    "\004\047\100\001\002\000\042\004\uffcb\005\071\006\072" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\047\uffcb\057\uffcb\061\uffcb" +
    "\001\002\000\036\004\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\047\uffcc\057\uffcc\061\uffcc\001\002\000\030\004\035\007" +
    "\034\010\031\011\030\013\005\014\004\015\015\021\032" +
    "\047\uffdf\057\026\061\014\001\002\000\004\047\104\001" +
    "\002\000\036\004\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\047" +
    "\uffcd\057\uffcd\061\uffcd\001\002\000\036\004\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\047\uffd0\057\uffd0\061\uffd0\001\002" +
    "\000\004\054\107\001\002\000\036\004\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\047\uffe1\057\uffe1\061\uffe1\001\002\000" +
    "\004\053\111\001\002\000\042\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\045\uffae\051\uffae\054\uffae" +
    "\001\002\000\006\045\120\057\117\001\002\000\042\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\045" +
    "\uffaa\051\uffaa\054\uffaa\001\002\000\022\022\042\023\044" +
    "\024\037\044\041\053\047\056\040\057\046\060\051\001" +
    "\002\000\004\051\116\001\002\000\042\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\045\uffaf\051\uffaf" +
    "\054\uffaf\001\002\000\006\045\uffe5\052\123\001\002\000" +
    "\042\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\045\uffe8\051\uffe8\054\uffe8\001\002\000\004\045\122" +
    "\001\002\000\042\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\045\uffe9\051\uffe9\054\uffe9\001\002\000" +
    "\004\057\117\001\002\000\004\045\uffe4\001\002\000\022" +
    "\022\042\023\044\024\037\044\041\053\047\056\040\057" +
    "\046\060\051\001\002\000\022\022\uffbf\023\uffbf\024\uffbf" +
    "\044\uffbf\053\uffbf\056\uffbf\057\uffbf\060\uffbf\001\002\000" +
    "\022\022\uffb7\023\uffb7\024\uffb7\044\uffb7\053\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\001\002\000\022\022\uffba\023\uffba\024" +
    "\uffba\044\uffba\053\uffba\056\uffba\057\uffba\060\uffba\001\002" +
    "\000\022\022\uffb3\023\uffb3\024\uffb3\044\uffb3\053\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\001\002\000\022\022\uffb5\023\uffb5" +
    "\024\uffb5\044\uffb5\053\uffb5\056\uffb5\057\uffb5\060\uffb5\001" +
    "\002\000\022\022\uffbe\023\uffbe\024\uffbe\044\uffbe\053\uffbe" +
    "\056\uffbe\057\uffbe\060\uffbe\001\002\000\022\022\uffb8\023" +
    "\uffb8\024\uffb8\044\uffb8\053\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\001\002\000\022\022\uffbb\023\uffbb\024\uffbb\044\uffbb\053" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\001\002\000\022\022\uffb4" +
    "\023\uffb4\024\uffb4\044\uffb4\053\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\001\002\000\022\022\uffbd\023\uffbd\024\uffbd\044\uffbd" +
    "\053\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002\000\022\022" +
    "\uffbc\023\uffbc\024\uffbc\044\uffbc\053\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\001\002\000\022\022\uffb6\023\uffb6\024\uffb6\044" +
    "\uffb6\053\uffb6\056\uffb6\057\uffb6\060\uffb6\001\002\000\022" +
    "\022\uffb9\023\uffb9\024\uffb9\044\uffb9\053\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\001\002\000\010\045\uffc1\051\uffc1\054\uffc1" +
    "\001\002\000\004\045\145\001\002\000\042\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\045\uffac\051" +
    "\uffac\054\uffac\001\002\000\012\013\005\014\004\015\015" +
    "\061\014\001\002\000\004\054\150\001\002\000\022\022" +
    "\042\023\044\024\037\044\041\053\047\056\040\057\046" +
    "\060\051\001\002\000\004\054\152\001\002\000\012\013" +
    "\005\014\004\015\015\061\014\001\002\000\004\045\154" +
    "\001\002\000\004\046\155\001\002\000\036\004\035\007" +
    "\034\010\031\011\030\012\056\013\005\014\004\015\015" +
    "\017\055\020\063\021\032\047\uffd1\057\026\061\014\001" +
    "\002\000\004\047\157\001\002\000\036\004\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\047\uffd9\057\uffd9\061\uffd9\001\002" +
    "\000\004\047\uffe3\001\002\000\022\022\042\023\044\024" +
    "\037\044\041\053\047\056\040\057\046\060\051\001\002" +
    "\000\004\045\163\001\002\000\004\054\164\001\002\000" +
    "\036\004\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\047\uffd4\057" +
    "\uffd4\061\uffd4\001\002\000\022\022\042\023\044\024\037" +
    "\044\041\053\047\056\040\057\046\060\051\001\002\000" +
    "\004\045\167\001\002\000\004\046\170\001\002\000\036" +
    "\004\035\007\034\010\031\011\030\012\056\013\005\014" +
    "\004\015\015\017\055\020\063\021\032\047\uffd1\057\026" +
    "\061\014\001\002\000\004\047\172\001\002\000\036\004" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\017\uffd8\020\uffd8\021\uffd8\047\uffd8\057\uffd8\061" +
    "\uffd8\001\002\000\036\004\035\007\034\010\031\011\030" +
    "\012\056\013\005\014\004\015\015\017\055\020\063\021" +
    "\032\047\uffd1\057\026\061\014\001\002\000\004\047\175" +
    "\001\002\000\004\010\176\001\002\000\004\044\177\001" +
    "\002\000\022\022\042\023\044\024\037\044\041\053\047" +
    "\056\040\057\046\060\051\001\002\000\004\045\201\001" +
    "\002\000\004\054\202\001\002\000\036\004\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\047\uffd7\057\uffd7\061\uffd7\001\002" +
    "\000\022\022\042\023\044\024\037\044\041\053\047\056" +
    "\040\057\046\060\051\001\002\000\022\022\042\023\044" +
    "\024\037\044\041\053\047\056\040\057\046\060\051\001" +
    "\002\000\004\051\206\001\002\000\004\043\207\001\002" +
    "\000\022\022\042\023\044\024\037\044\041\053\047\056" +
    "\040\057\046\060\051\001\002\000\004\054\211\001\002" +
    "\000\036\004\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\047\uffd5" +
    "\057\uffd5\061\uffd5\001\002\000\004\054\213\001\002\000" +
    "\036\004\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\047\uffd6\057" +
    "\uffd6\061\uffd6\001\002\000\006\017\uffe0\047\uffe0\001\002" +
    "\000\006\002\uffff\016\uffff\001\002\000\006\002\ufff3\016" +
    "\217\001\002\000\012\013\005\014\004\055\224\061\014" +
    "\001\002\000\004\002\000\001\002\000\004\046\237\001" +
    "\002\000\004\057\ufff0\001\002\000\004\057\225\001\002" +
    "\000\004\057\uffef\001\002\000\004\044\226\001\002\000" +
    "\012\013\005\014\004\045\230\061\014\001\002\000\004" +
    "\046\ufff1\001\002\000\004\046\uffea\001\002\000\004\057" +
    "\234\001\002\000\004\045\233\001\002\000\004\046\uffeb" +
    "\001\002\000\006\045\uffe6\052\235\001\002\000\010\013" +
    "\005\014\004\061\014\001\002\000\004\045\uffe7\001\002" +
    "\000\032\004\035\007\034\010\031\011\030\013\005\014" +
    "\004\015\015\017\uffdf\021\032\047\uffdf\057\026\061\014" +
    "\001\002\000\004\047\241\001\002\000\006\002\ufff2\016" +
    "\ufff2\001\002\000\004\002\ufff4\001\002\000\006\016\ufff6" +
    "\025\ufff6\001\002\000\012\043\uffc5\050\253\052\252\054" +
    "\uffc5\001\002\000\006\043\247\054\uffc7\001\002\000\004" +
    "\054\251\001\002\000\022\022\042\023\044\024\037\044" +
    "\041\053\047\056\040\057\046\060\051\001\002\000\004" +
    "\054\uffc8\001\002\000\046\004\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\025\uffdc\045\uffdc\047\uffdc\054\uffdc\057" +
    "\uffdc\061\uffdc\001\002\000\004\057\257\001\002\000\004" +
    "\056\254\001\002\000\004\051\255\001\002\000\004\054" +
    "\256\001\002\000\046\004\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\025\uffdb\045\uffdb\047\uffdb\054\uffdb\057\uffdb" +
    "\061\uffdb\001\002\000\010\043\uffc5\052\252\054\uffc5\001" +
    "\002\000\006\043\uffc6\054\uffc6\001\002\000\004\025\ufffe" +
    "\001\002\000\006\016\uffa9\025\ufffc\001\002\000\004\016" +
    "\264\001\002\000\012\013\005\014\004\055\224\061\014" +
    "\001\002\000\004\057\266\001\002\000\004\044\267\001" +
    "\002\000\012\013\005\014\004\045\272\061\014\001\002" +
    "\000\004\054\271\001\002\000\006\016\ufffb\025\ufffb\001" +
    "\002\000\004\054\ufff9\001\002\000\004\057\276\001\002" +
    "\000\004\045\275\001\002\000\004\054\ufffa\001\002\000" +
    "\006\045\ufff7\052\277\001\002\000\010\013\005\014\004" +
    "\061\014\001\002\000\004\045\ufff8\001\002\000\004\025" +
    "\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\016\003\006\004\012\012\005\027\007\030" +
    "\011\035\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\262\023" +
    "\260\024\261\001\001\000\004\037\244\001\001\000\012" +
    "\012\005\027\242\030\011\035\010\001\001\000\006\002" +
    "\017\005\016\001\001\000\002\001\001\000\004\012\015" +
    "\001\001\000\002\001\001\000\006\006\217\007\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\005" +
    "\017\022\021\032\022\024\030\026\031\023\035\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\005" +
    "\021\213\022\024\030\026\031\023\035\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\040\051\041\042" +
    "\043\044\044\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\040\143\041\042\043\044\044\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\124\001\001\000\004\015\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\012\005\020\061\022\057" +
    "\030\026\031\023\032\056\033\060\035\010\001\001\000" +
    "\012\040\105\041\042\043\044\044\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\005\020\061\022" +
    "\057\030\026\031\023\032\065\033\060\035\010\001\001" +
    "\000\022\012\005\020\061\022\057\030\026\031\023\032" +
    "\064\033\060\035\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\040\073\041\042\043" +
    "\044\044\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\005\021\076\022\024\030\026\031\023\035" +
    "\010\001\001\000\002\001\001\000\004\034\100\001\001" +
    "\000\002\001\001\000\016\012\005\021\102\022\024\030" +
    "\026\031\023\035\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\120" +
    "\001\001\000\002\001\001\000\012\040\114\041\042\043" +
    "\044\044\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\123\001\001\000\002\001\001" +
    "\000\012\040\142\041\042\043\044\044\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\005\030\146\035\010\001\001\000\002\001\001\000" +
    "\012\040\150\041\042\043\044\044\047\001\001\000\002" +
    "\001\001\000\010\012\005\030\152\035\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\005\020\061" +
    "\022\057\030\026\031\023\032\155\033\060\035\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\040\161\041\042\043\044\044\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\040\165\041\042\043\044\044\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\012\005\020\061\022\057" +
    "\030\026\031\023\032\170\033\060\035\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\005\020\061" +
    "\022\057\030\026\031\023\032\173\033\060\035\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\040\177\041\042\043\044\044\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\040\211\041\042\043\044\044\047\001\001\000\012\040" +
    "\204\041\042\043\044\044\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\040\207\041\042\043\044\044" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\241\007\215\001\001\000\010\010\220" +
    "\011\222\012\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\226\001\001\000\006\012\230\014\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\230\014\235\001\001\000\002\001\001\000\020" +
    "\012\005\017\237\021\032\022\024\030\026\031\023\035" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\245\001\001\000\002\001\001\000\012\040\247\041\042" +
    "\043\044\044\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\262" +
    "\023\300\024\261\001\001\000\002\001\001\000\006\011" +
    "\264\012\221\001\001\000\002\001\001\000\004\025\267" +
    "\001\001\000\006\012\272\026\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\272\026\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }
***/
    TSimbolos tSimbolos = new TSimbolos();
    AnSem ansem = new AnSem(tSimbolos);

    public TSimbolos getTSimbolos() {
        return tSimbolos;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= XAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Xava start_val = (Xava)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // XAVA ::= DECLGLOB MAIN_FN FUNCIONES 
            {
              Xava RESULT =null;
		int gdeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gdeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclGlob gdecls = (DeclGlob)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Main_fn main = (Main_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Funciones funciones = (Funciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Xava(gdecls, main, funciones, 0, 0);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("XAVA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN_FN ::= M PRINCIPAL LLAVE_A FSENTS LLAVE_C 
            {
              Main_fn RESULT =null;
		int fsentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FSents fsents = (FSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("He analizado el principal");RESULT = new Main_fn(fsents, fsentsleft, fsentsright);                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_FN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLGLOB ::= DECLS DECLSF 
            {
              DeclGlob RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclsF declsf = (DeclsF)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclGlob(declsf, decls, declsleft, declsright);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLGLOB",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLSF ::= DECLF DECLSF 
            {
              DeclsF RESULT =null;
		int declfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclF declf = (DeclF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclsF declsf = (DeclsF)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclsF(declf, declsf, declfleft, declfright);                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLSF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLSF ::= 
            {
              DeclsF RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLSF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLF ::= M FUNCION ETYPE ID ARGS_DECLF P_COMA 
            {
              DeclF RESULT =null;
		int eTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		EnumType eType = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int args_declfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int args_declfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Args_Declf args_declf = (Args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  if (!tSimbolos.ponerSimbolo(new Symbol(id, TipoElemento.FUNCION, eType, null, true, 0, idleft))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la función ha sido declarada anteriormente o el nombre de la función ya está usada
                            ErrorC.añadirError(new ErrorC("Función " + id + "declarada previamente", idleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new DeclF(eType, id, args_declf, eTypeleft, eTyperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLF",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARGS_DECLF ::= PAR_A L_ARGS_DECLF PAR_C 
            {
              Args_Declf RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Declf args = (L_args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Declf(args, argsleft, argsright);                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_DECLF",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ARGS_DECLF ::= PAR_A PAR_C 
            {
              Args_Declf RESULT =null;
		 RESULT = new Args_Declf(null, cur_token.left, cur_token.right);                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_DECLF",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_ARGS_DECLF ::= STYPE ID COMA L_ARGS_DECLF 
            {
              L_args_Declf RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Declf args = (L_args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (!tSimbolos.ponerSimbolo(new Symbol(id, TipoElemento.PARAMETRO, stype, null, false, 0, idleft))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                            ErrorC.añadirError(new ErrorC("Variable " + id + "declarada previamente", idleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new L_args_Declf(stype, id, args, stypeleft, styperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_DECLF",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_ARGS_DECLF ::= STYPE ID 
            {
              L_args_Declf RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if (!tSimbolos.ponerSimbolo(new Symbol(id, TipoElemento.PARAMETRO, stype, null, false, 0, idleft))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                            ErrorC.añadirError(new ErrorC("Variable " + id + "declarada previamente", idleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new L_args_Declf(stype, id, stypeleft, styperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_DECLF",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLS ::= DECL DECLS 
            {
              Decls RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decls(decl, decls, declleft, declright);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLS ::= 
            {
              Decls RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES ::= FUNCIONG FUNCIONES 
            {
              Funciones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncionG f = (FuncionG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Funciones funciones = (Funciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Funciones(f, funciones, fleft,fright);                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES ::= 
            {
              Funciones RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCIONG ::= FUNCION CAP LLAVE_A FSENTS LLAVE_C 
            {
              FuncionG RESULT =null;
		int capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Cap cap = (Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int f_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int f_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FSents f_sents = (FSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (ansem.existeFuncion(cap)) {
                            ansem.isReturn(f_sents);
                            RESULT = new FuncionG(cap, f_sents, capleft, capright);
                        }
                        System.out.println("He analizado la funcion");

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONG",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CAP ::= ETYPE ID ARGS_CAP 
            {
              Cap RESULT =null;
		int etypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int etyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		EnumType etype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int args_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int args_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args_Cap args_cap = (Args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        tSimbolos.updatenActual(id);
                        System.out.println("He analizado el cap"); RESULT = new Cap(etype, id, args_cap, etypeleft, etyperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ETYPE ::= STYPE 
            {
              EnumType RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stype;                                                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ETYPE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ETYPE ::= VACIO 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.VACIO;                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ETYPE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STYPE ::= ENTERO 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.ENTERO;                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STYPE ::= BOOLEANO 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.BOOLEANO;                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STYPE ::= CARACTER 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.CARACTER;                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGS_CAP ::= PAR_A L_ARGS_CAP PAR_C 
            {
              Args_Cap RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Cap args = (L_args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Cap(args, argsleft, argsright);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CAP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGS_CAP ::= PAR_A PAR_C 
            {
              Args_Cap RESULT =null;
		 RESULT = new Args_Cap(null, cur_token.left, cur_token.right);                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CAP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGS_CALL ::= PAR_A L_ARGS_CALL PAR_C 
            {
              Args_Call RESULT =null;
		int l_args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l_args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Call l_args_call = (L_args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Call(l_args_call, l_args_callleft, l_args_callright);      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CALL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGS_CALL ::= PAR_A PAR_C 
            {
              Args_Call RESULT =null;
		 RESULT = new Args_Call(null, cur_token.left, cur_token.right);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CALL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_ARGS_CAP ::= STYPE ID COMA L_ARGS_CAP 
            {
              L_args_Cap RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_args_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_args_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Cap l_args_cap = (L_args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Cap(stype, id, l_args_cap, stypeleft, styperight);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_ARGS_CAP ::= STYPE ID 
            {
              L_args_Cap RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Cap(stype, id, stypeleft, styperight);                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_ARGS_CALL ::= ID 
            {
              L_args_Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Call(id, idleft, idright);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L_ARGS_CALL ::= ID COMA L_ARGS_CALL 
            {
              L_args_Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Call l_args_call = (L_args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Call(id, l_args_call, idleft, idright);                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FSENTS ::= SENTS RET_PROC 
            {
              FSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ret_procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ret_procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetProc ret_proc = (RetProc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("He analizado el fsents");RESULT = new FSents(sents, ret_proc, sentsleft, sentsright);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FSENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FSENTS ::= SENTS 
            {
              FSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("He analizado el fsents");RESULT = new FSents(sents, sentsleft, sentsright);                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FSENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RET_PROC ::= DEVUELVE E P_COMA 
            {
              RetProc RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RetProc(exp, expleft, expright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RET_PROC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTS ::= SENT SENTS 
            {
              Sents RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sents(sent, sents, sentleft, sentright);                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTS ::= 
            {
              Sents RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= DECL 
            {
              Sent RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sent(decl, declleft, declright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= INST 
            {
              Sent RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sent(inst, instleft, instright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECL ::= TYPE LID DASIGNACION P_COMA 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Lid lid = (Lid)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int d_asignacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int d_asignacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		D_asig d_asignacion = (D_asig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        ansem.gestAsig(type.getStype(), d_asignacion.getE());
                        for (Lid aux = lid; aux != null; aux = aux.getLid()) {
                            if (!tSimbolos.ponerSimbolo(new Symbol(aux.getId(), TipoElemento.VARIABLE, type.getStype(), null, type.getConstante(), 0, lidleft))) {
                                // MANEJO DE ERRORES SEMANTICOS
                                // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                                ErrorC.añadirError(new ErrorC("Variable declarada previamente", aux.getLinea(), Fase.SEMÁNTICO));
                            }
                        }

                        RESULT = new Decl(type, lid, d_asignacion, typeleft, typeright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECL ::= TYPE ID CORCHETE_A DIGITO CORCHETE_C P_COMA 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        if (!type.getConstante()) {

                            if (!tSimbolos.ponerSimbolo(new Symbol(id, TipoElemento.ARRAY, type.getStype(), null, false, Integer.parseInt(num), idleft))) {
                                // MANEJO DE ERRORES SEMANTICOS
                                // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                                ErrorC.añadirError(new ErrorC("Variable " + id + "declarada previamente", idleft, Fase.SEMÁNTICO));
                            }
                            RESULT = new Decl(type, id, num, typeleft, typeright);
                        } else {
                            // MANEJO DE ERRORES SEMANTICOS
                            // No se puede declarar un array de tipo constante
                            ErrorC.añadirError(new ErrorC("Un array no puede ser constante", idleft, Fase.SEMÁNTICO));
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= SI PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C CONT_COND 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cont_condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cont_condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cont_cond cont_cond = (Cont_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Inst("cond", exp, c_sents, null, null, cont_cond, expleft, expright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST ::= PARA PAR_A DECL P_COMA E P_COMA DECL PAR_C LLAVE_A C_SENTS LLAVE_C 
            {
              Inst RESULT =null;
		int decl_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int decl_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Decl decl_cap = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Inst("para", exp, c_sents, decl_cap, decl, null, decl_capleft, decl_capright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= MIENTRAS PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Inst("mientras", exp, c_sents, null, null, null, expleft, expright);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= HACER LLAVE_A C_SENTS LLAVE_C MIENTRAS PAR_A E PAR_C P_COMA 
            {
              Inst RESULT =null;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = new Inst("hacer_mientras", exp, c_sents, null, null, null, c_sentsleft, c_sentsright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= ID ASIG E P_COMA 
            {
              Inst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Symbol symbol = tSimbolos.getSymbol(id);
                        ansem.gestAsig(symbol.getTipoReturn(), exp);
                        RESULT = new Inst("asig", id, null, exp, idleft, idright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= ID CORCHETE_A E CORCHETE_C ASIG E P_COMA 
            {
              Inst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp expArr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (ansem.gestExp(expArr) != EnumType.ENTERO) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // El indice del array debe ser de tipo entero
                            ErrorC.añadirError(new ErrorC("El indice del array debe ser de tipo entero", expArr.getLinea(), Fase.SEMÁNTICO));
                        }
                        Symbol symbol = tSimbolos.getSymbol(id);
                        ansem.gestAsig(symbol.getTipoReturn(), exp);
                        RESULT = new Inst("asig", id, expArr, exp, idleft, idright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= IMPRIMIR PAR_A E PAR_C P_COMA 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Inst("impr", null, null, exp, expleft, expright);                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // C_SENTS ::= SENT C_SENTS 
            {
              C_sents RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new C_sents(sent, c_sents, sentleft, sentright);                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // C_SENTS ::= C_SENT C_SENTS 
            {
              C_sents RESULT =null;
		int c_sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sent c_sent = (C_sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new C_sents(c_sent, c_sents, c_sentleft, c_sentright);              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // C_SENTS ::= 
            {
              C_sents RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // C_SENT ::= ROMPER P_COMA 
            {
              C_sent RESULT =null;
		 RESULT = new C_sent("Romper", null, cur_token.left, cur_token.right);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // C_SENT ::= CONTINUAR P_COMA 
            {
              C_sent RESULT =null;
		 RESULT = new C_sent("Continuar", null, cur_token.left, cur_token.right);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // C_SENT ::= RET_PROC 
            {
              C_sent RESULT =null;
		int ret_procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ret_procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetProc ret_proc = (RetProc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ansem.gestReturnFunc(ret_proc);
                       RESULT = new C_sent("ret_proc", ret_proc, ret_procleft, ret_procright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONT_COND ::= SINO LLAVE_A SENTS LLAVE_C 
            {
              Cont_cond RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Cont_cond(null, sents, null, sentsleft, sentsright);            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONT_COND ::= SINOSI PAR_A E PAR_C LLAVE_A SENTS LLAVE_C CONT_COND 
            {
              Cont_cond RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cont_condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cont_condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cont_cond cont_cond = (Cont_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Cont_cond(exp, sents, cont_cond, expleft, expright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONT_COND ::= 
            {
              Cont_cond RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TYPE ::= STYPE 
            {
              Type RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(false, stype, stypeleft, styperight);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TYPE ::= CONST STYPE 
            {
              Type RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(true, stype, stypeleft, styperight);                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DASIGNACION ::= ASIG E 
            {
              D_asig RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new D_asig(exp, expleft, expright);                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DASIGNACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DASIGNACION ::= 
            {
              D_asig RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DASIGNACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LID ::= ID COMA LID 
            {
              Lid RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lid lid = (Lid)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lid(id, lid, idleft, idright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LID ::= ID 
            {
              Lid RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lid(id, idleft, idright);                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ENTRADA ::= LEERBOOL 
            {
              Entrada RESULT =null;
		 RESULT = new Entrada(EnumType.BOOLEANO, cur_token.left, cur_token.right);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ENTRADA ::= LEERCAR 
            {
              Entrada RESULT =null;
		 RESULT = new Entrada(EnumType.CARACTER, cur_token.left, cur_token.right);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ENTRADA ::= LEERENT 
            {
              Entrada RESULT =null;
		 RESULT = new Entrada(EnumType.ENTERO, cur_token.left, cur_token.right);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= VALUE OP E 
            {
              Exp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Op op = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresion con op");RESULT = new Exp(value, op, exp, valueleft, valueright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= VALUE 
            {
              Exp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresion sin op");RESULT = new Exp(value, valueleft, valueright);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP ::= Y 
            {
              Op RESULT =null;
		 RESULT = Op.Y;                                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP ::= O 
            {
              Op RESULT =null;
		 RESULT = Op.O;                                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP ::= IGUAL 
            {
              Op RESULT =null;
		 RESULT = Op.IGUAL;                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP ::= IGUALNT 
            {
              Op RESULT =null;
		 RESULT = Op.IGUALNT;                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP ::= MAQ 
            {
              Op RESULT =null;
		 RESULT = Op.MAQ;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP ::= MEQ 
            {
              Op RESULT =null;
		 RESULT = Op.MEQ;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= MAI 
            {
              Op RESULT =null;
		 RESULT = Op.MAI;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= MEI 
            {
              Op RESULT =null;
		 RESULT = Op.MEI;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= SUMA 
            {
              Op RESULT =null;
		 RESULT = Op.SUMA;                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP ::= RESTA 
            {
              Op RESULT =null;
		 RESULT = Op.RESTA;                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP ::= MULT 
            {
              Op RESULT =null;
		 RESULT = Op.MULT;                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP ::= DIV 
            {
              Op RESULT =null;
		 RESULT = Op.DIV;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP ::= MOD 
            {
              Op RESULT =null;
		 RESULT = Op.MOD;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALUE ::= DIGITO 
            {
              Value RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(num, "Ent", numleft, numright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALUE ::= CALL_FN 
            {
              Value RESULT =null;
		int call_fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int call_fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call_fn call_fn = (Call_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(call_fn, call_fnleft, call_fnright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALUE ::= ID 
            {
              Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(id, "Id", idleft, idright);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALUE ::= ID CORCHETE_A E CORCHETE_C 
            {
              Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp expArr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if (ansem.gestExp(expArr) != EnumType.ENTERO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // El índice del array debe ser de tipo entero
                        ErrorC.añadirError(new ErrorC("El indice del array debe ser de tipo entero", expArr.getLinea(), Fase.SEMÁNTICO));
                    }
                    ansem.gestArray(id, expArr, expArr.getLinea());
                    RESULT = new Value(id, "Arr", expArr, idleft, idright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALUE ::= COMILLAS CARACTER COMILLAS 
            {
              Value RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Value(car, "Car", carleft, carright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALUE ::= VAL_BOL 
            {
              Value RESULT =null;
		int val_bolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val_bolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val_bol = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(val_bol, "Bol", val_bolleft, val_bolright);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALUE ::= PAR_A E PAR_C 
            {
              Value RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Value(exp, expleft, expright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALUE ::= ENTRADA 
            {
              Value RESULT =null;
		int entradaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int entradaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Entrada entrada = (Entrada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(entrada, entradaleft, entradaright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CALL_FN ::= ID ARGS_CALL 
            {
              Call_fn RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args_Call args_call = (Args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Call_fn(id, args_call, args_callleft, args_callright);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // M ::= 
            {
              Object RESULT =null;
		 tSimbolos.añadirAmbito();                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
