
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.grammar;

import java_cup.runtime.*;
import compiler.sintactic.Symbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\005\000\002\004" +
    "\006\000\002\003\003\000\002\003\002\000\002\021\004" +
    "\000\002\021\003\000\002\005\004\000\002\005\002\000" +
    "\002\006\007\000\002\007\005\000\002\007\005\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\005\000\002\011\004\000\002\013\005\000\002\013\004" +
    "\000\002\012\006\000\002\012\004\000\002\014\003\000" +
    "\002\014\005\000\002\015\004\000\002\015\003\000\002" +
    "\016\005\000\002\017\004\000\002\017\002\000\002\020" +
    "\003\000\002\020\003\000\002\022\006\000\002\022\010" +
    "\000\002\023\012\000\002\023\015\000\002\023\011\000" +
    "\002\023\013\000\002\023\006\000\002\023\007\000\002" +
    "\024\004\000\002\024\004\000\002\024\002\000\002\025" +
    "\004\000\002\025\004\000\002\026\006\000\002\026\012" +
    "\000\002\026\002\000\002\027\003\000\002\027\004\000" +
    "\002\030\004\000\002\030\002\000\002\031\005\000\002" +
    "\031\003\000\002\032\005\000\002\032\003\000\002\032" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\033\005\000\002\033\003\000\002\033\003\000" +
    "\002\034\005\000\002\034\003\000\002\034\005\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\005\000\002\042\004\000\002\036\003\000\002\036\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\014\013\005\014\004\015\015\025\ufffd\060" +
    "\014\001\002\000\004\056\ufff4\001\002\000\004\056\ufff5" +
    "\001\002\000\004\056\uffd3\001\002\000\004\002\254\001" +
    "\002\000\004\056\237\001\002\000\004\025\ufffe\001\002" +
    "\000\014\013\005\014\004\015\015\025\ufffb\060\014\001" +
    "\002\000\004\025\017\001\002\000\004\056\ufff3\001\002" +
    "\000\010\013\005\014\004\060\014\001\002\000\004\056" +
    "\uffd2\001\002\000\004\045\233\001\002\000\006\002\ufff9" +
    "\016\022\001\002\000\006\002\ufff9\016\022\001\002\000" +
    "\012\013\005\014\004\054\026\060\014\001\002\000\004" +
    "\002\000\001\002\000\004\045\043\001\002\000\004\056" +
    "\041\001\002\000\004\056\027\001\002\000\004\043\030" +
    "\001\002\000\012\013\005\014\004\044\032\060\014\001" +
    "\002\000\004\045\ufff6\001\002\000\004\045\ufff1\001\002" +
    "\000\004\056\036\001\002\000\004\044\035\001\002\000" +
    "\004\045\ufff2\001\002\000\006\044\uffed\051\037\001\002" +
    "\000\010\013\005\014\004\060\014\001\002\000\004\044" +
    "\uffee\001\002\000\004\043\030\001\002\000\004\045\ufff7" +
    "\001\002\000\032\004\056\007\055\010\051\011\052\013" +
    "\005\014\004\015\015\017\uffe6\021\053\046\uffe6\056\050" +
    "\060\014\001\002\000\004\046\231\001\002\000\036\004" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\017\uffe4\020\uffe4\021\uffe4\046\uffe4\056\uffe4\060" +
    "\uffe4\001\002\000\032\004\056\007\055\010\051\011\052" +
    "\013\005\014\004\015\015\017\uffe6\021\053\046\uffe6\056" +
    "\050\060\014\001\002\000\036\004\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\046\uffe5\056\uffe5\060\uffe5\001\002\000\004" +
    "\042\225\001\002\000\004\043\217\001\002\000\004\045" +
    "\207\001\002\000\004\043\203\001\002\000\006\017\177" +
    "\046\uffe9\001\002\000\004\043\165\001\002\000\004\043" +
    "\057\001\002\000\022\022\063\023\065\024\062\043\061" +
    "\052\071\055\060\056\070\057\073\001\002\000\036\026" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\044\uffc1\053" +
    "\uffc1\001\002\000\022\022\063\023\065\024\062\043\061" +
    "\052\071\055\060\056\070\057\073\001\002\000\006\044" +
    "\uffca\053\uffca\001\002\000\006\044\uffc8\053\uffc8\001\002" +
    "\000\006\044\uffcb\053\uffcb\001\002\000\006\044\uffc9\053" +
    "\uffc9\001\002\000\012\033\161\034\160\044\uffcc\053\uffcc" +
    "\001\002\000\036\026\153\027\150\030\152\031\155\032" +
    "\151\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\044\uffc3\053\uffc3\001\002\000\040\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\043\140\044\uffbf\053" +
    "\uffbf\001\002\000\004\060\136\001\002\000\036\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\044\uffc0\053\uffc0" +
    "\001\002\000\012\033\uffc5\034\uffc5\044\uffc5\053\uffc5\001" +
    "\002\000\024\033\uffc6\034\uffc6\035\133\036\132\037\127" +
    "\040\130\041\134\044\uffc6\053\uffc6\001\002\000\004\044" +
    "\076\001\002\000\004\045\077\001\002\000\034\004\056" +
    "\007\055\010\051\011\052\012\100\013\005\014\004\015" +
    "\015\020\104\021\053\046\uffd9\056\050\060\014\001\002" +
    "\000\004\053\126\001\002\000\004\046\110\001\002\000" +
    "\034\004\056\007\055\010\051\011\052\012\100\013\005" +
    "\014\004\015\015\020\104\021\053\046\uffd9\056\050\060" +
    "\014\001\002\000\034\004\056\007\055\010\051\011\052" +
    "\012\100\013\005\014\004\015\015\020\104\021\053\046" +
    "\uffd9\056\050\060\014\001\002\000\004\053\105\001\002" +
    "\000\034\004\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\020\uffd7\021\uffd7\046\uffd7\056\uffd7" +
    "\060\uffd7\001\002\000\004\046\uffda\001\002\000\004\046" +
    "\uffdb\001\002\000\042\004\uffd4\005\112\006\113\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\046\uffd4\056\uffd4\060\uffd4\001\002" +
    "\000\036\004\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\046\uffe1" +
    "\056\uffe1\060\uffe1\001\002\000\004\045\123\001\002\000" +
    "\004\043\114\001\002\000\022\022\063\023\065\024\062" +
    "\043\061\052\071\055\060\056\070\057\073\001\002\000" +
    "\004\044\116\001\002\000\004\045\117\001\002\000\030" +
    "\004\056\007\055\010\051\011\052\013\005\014\004\015" +
    "\015\021\053\046\uffe6\056\050\060\014\001\002\000\004" +
    "\046\121\001\002\000\042\004\uffd4\005\112\006\113\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\046\uffd4\056\uffd4\060\uffd4\001" +
    "\002\000\036\004\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\046" +
    "\uffd5\056\uffd5\060\uffd5\001\002\000\030\004\056\007\055" +
    "\010\051\011\052\013\005\014\004\015\015\021\053\046" +
    "\uffe6\056\050\060\014\001\002\000\004\046\125\001\002" +
    "\000\036\004\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\046\uffd6" +
    "\056\uffd6\060\uffd6\001\002\000\034\004\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\020\uffd8" +
    "\021\uffd8\046\uffd8\056\uffd8\060\uffd8\001\002\000\014\043" +
    "\uffb8\052\uffb8\055\uffb8\056\uffb8\057\uffb8\001\002\000\014" +
    "\043\uffb7\052\uffb7\055\uffb7\056\uffb7\057\uffb7\001\002\000" +
    "\014\043\061\052\071\055\060\056\070\057\073\001\002" +
    "\000\014\043\uffb9\052\uffb9\055\uffb9\056\uffb9\057\uffb9\001" +
    "\002\000\014\043\uffba\052\uffba\055\uffba\056\uffba\057\uffba" +
    "\001\002\000\014\043\uffb6\052\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\001\002\000\012\033\uffc7\034\uffc7\044\uffc7\053\uffc7" +
    "\001\002\000\004\052\137\001\002\000\036\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\044\uffbe\053\uffbe\001" +
    "\002\000\006\044\143\056\142\001\002\000\036\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\044\uffbd\053\uffbd" +
    "\001\002\000\006\044\uffec\051\146\001\002\000\036\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\044\uffef\053" +
    "\uffef\001\002\000\004\044\145\001\002\000\036\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\044\ufff0\053\ufff0" +
    "\001\002\000\004\056\142\001\002\000\004\044\uffeb\001" +
    "\002\000\012\043\uffb4\052\uffb4\055\uffb4\056\uffb4\001\002" +
    "\000\012\043\uffb1\052\uffb1\055\uffb1\056\uffb1\001\002\000" +
    "\012\043\uffb3\052\uffb3\055\uffb3\056\uffb3\001\002\000\012" +
    "\043\uffb5\052\uffb5\055\uffb5\056\uffb5\001\002\000\012\043" +
    "\061\052\071\055\060\056\070\001\002\000\012\043\uffb2" +
    "\052\uffb2\055\uffb2\056\uffb2\001\002\000\024\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\044\uffc4" +
    "\053\uffc4\001\002\000\022\022\063\023\065\024\062\043" +
    "\061\052\071\055\060\056\070\057\073\001\002\000\022" +
    "\022\uffbb\023\uffbb\024\uffbb\043\uffbb\052\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\001\002\000\022\022\uffbc\023\uffbc\024\uffbc" +
    "\043\uffbc\052\uffbc\055\uffbc\056\uffbc\057\uffbc\001\002\000" +
    "\006\044\uffcd\053\uffcd\001\002\000\004\044\164\001\002" +
    "\000\024\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\044\uffc2\053\uffc2\001\002\000\012\013\005" +
    "\014\004\015\015\060\014\001\002\000\004\053\167\001" +
    "\002\000\022\022\063\023\065\024\062\043\061\052\071" +
    "\055\060\056\070\057\073\001\002\000\004\053\171\001" +
    "\002\000\012\013\005\014\004\015\015\060\014\001\002" +
    "\000\004\044\173\001\002\000\004\045\174\001\002\000" +
    "\034\004\056\007\055\010\051\011\052\012\100\013\005" +
    "\014\004\015\015\020\104\021\053\046\uffd9\056\050\060" +
    "\014\001\002\000\004\046\176\001\002\000\036\004\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\046\uffe0\056\uffe0\060\uffe0" +
    "\001\002\000\022\022\063\023\065\024\062\043\061\052" +
    "\071\055\060\056\070\057\073\001\002\000\004\046\uffea" +
    "\001\002\000\004\053\202\001\002\000\004\046\uffe8\001" +
    "\002\000\022\022\063\023\065\024\062\043\061\052\071" +
    "\055\060\056\070\057\073\001\002\000\004\044\205\001" +
    "\002\000\004\053\206\001\002\000\036\004\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\046\uffdc\056\uffdc\060\uffdc\001\002" +
    "\000\034\004\056\007\055\010\051\011\052\012\100\013" +
    "\005\014\004\015\015\020\104\021\053\046\uffd9\056\050" +
    "\060\014\001\002\000\004\046\211\001\002\000\004\010" +
    "\212\001\002\000\004\043\213\001\002\000\022\022\063" +
    "\023\065\024\062\043\061\052\071\055\060\056\070\057" +
    "\073\001\002\000\004\044\215\001\002\000\004\053\216" +
    "\001\002\000\036\004\uffde\007\uffde\010\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\017\uffde\020\uffde\021\uffde" +
    "\046\uffde\056\uffde\060\uffde\001\002\000\022\022\063\023" +
    "\065\024\062\043\061\052\071\055\060\056\070\057\073" +
    "\001\002\000\004\044\221\001\002\000\004\045\222\001" +
    "\002\000\034\004\056\007\055\010\051\011\052\012\100" +
    "\013\005\014\004\015\015\020\104\021\053\046\uffd9\056" +
    "\050\060\014\001\002\000\004\046\224\001\002\000\036" +
    "\004\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\017\uffdf\020\uffdf\021\uffdf\046\uffdf\056\uffdf" +
    "\060\uffdf\001\002\000\022\022\063\023\065\024\062\043" +
    "\061\052\071\055\060\056\070\057\073\001\002\000\004" +
    "\053\227\001\002\000\036\004\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\046\uffdd\056\uffdd\060\uffdd\001\002\000\006\017" +
    "\uffe7\046\uffe7\001\002\000\006\002\ufff8\016\ufff8\001\002" +
    "\000\004\002\ufffa\001\002\000\032\004\056\007\055\010" +
    "\051\011\052\013\005\014\004\015\015\017\uffe6\021\053" +
    "\046\uffe6\056\050\060\014\001\002\000\004\046\235\001" +
    "\002\000\006\002\uffff\016\uffff\001\002\000\004\025\ufffc" +
    "\001\002\000\012\042\uffce\047\246\051\245\053\uffce\001" +
    "\002\000\006\042\242\053\uffd0\001\002\000\004\053\244" +
    "\001\002\000\022\022\063\023\065\024\062\043\061\052" +
    "\071\055\060\056\070\057\073\001\002\000\004\053\uffd1" +
    "\001\002\000\044\004\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\025\uffe3\044\uffe3\046\uffe3\053\uffe3\056\uffe3\060\uffe3\001" +
    "\002\000\004\056\252\001\002\000\004\055\247\001\002" +
    "\000\004\050\250\001\002\000\004\053\251\001\002\000" +
    "\044\004\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\025\uffe2\044" +
    "\uffe2\046\uffe2\053\uffe2\056\uffe2\060\uffe2\001\002\000\010" +
    "\042\uffce\051\245\053\uffce\001\002\000\006\042\uffcf\053" +
    "\uffcf\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\016\002\006\003\012\010\005\021\010\022" +
    "\011\027\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\237\001" +
    "\001\000\002\001\001\000\012\010\005\021\235\022\011" +
    "\027\007\001\001\000\004\004\017\001\001\000\002\001" +
    "\001\000\004\010\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\022\006\020\001\001\000\006\005" +
    "\231\006\020\001\001\000\006\007\023\010\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\030\001\001\000\006\010\032" +
    "\012\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\032\012\037\001\001\000\002\001" +
    "\001\000\004\011\041\001\001\000\002\001\001\000\020" +
    "\010\005\015\043\017\053\020\045\022\046\023\044\027" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\005\017\227\020\045\022\046\023\044\027\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\032\074" +
    "\033\065\034\073\035\063\041\066\042\071\001\001\000" +
    "\002\001\001\000\016\032\162\033\065\034\073\035\063" +
    "\041\066\042\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\156" +
    "\001\001\000\004\040\153\001\001\000\004\013\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\005\020\101\022\046\023\044\024\100" +
    "\025\102\027\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\005\020\101\022\046\023\044\024\106" +
    "\025\102\027\007\001\001\000\020\010\005\020\101\022" +
    "\046\023\044\024\105\025\102\027\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\032\114\033\065\034" +
    "\073\035\063\041\066\042\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\005\017\117\020\045\022" +
    "\046\023\044\027\007\001\001\000\002\001\001\000\004" +
    "\026\121\001\001\000\002\001\001\000\016\010\005\017" +
    "\123\020\045\022\046\023\044\027\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\033\134\034\073\041\066" +
    "\042\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\034\155\041\066\042\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\032\161\033\065" +
    "\034\073\035\063\041\066\042\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\005\022\165\027\007\001" +
    "\001\000\002\001\001\000\016\032\167\033\065\034\073" +
    "\035\063\041\066\042\071\001\001\000\002\001\001\000" +
    "\010\010\005\022\171\027\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\005\020\101\022\046\023" +
    "\044\024\174\025\102\027\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\032\200\033\065\034\073\035" +
    "\063\041\066\042\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\032\203\033\065\034" +
    "\073\035\063\041\066\042\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\005\020" +
    "\101\022\046\023\044\024\207\025\102\027\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\032\213\033\065\034\073\035\063\041\066\042\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\032\217\033\065\034\073\035\063\041\066" +
    "\042\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\005\020\101\022\046\023\044\024\222\025\102" +
    "\027\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\032\225\033\065\034\073\035\063\041\066\042\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\005" +
    "\015\233\017\053\020\045\022\046\023\044\027\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\240\001\001\000\002\001" +
    "\001\000\016\032\242\033\065\034\073\035\063\041\066" +
    "\042\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }
***/

    private HashMap<String, Double> tsymbol = new HashMap<>();

    public Double getSymbolValue(String id) {
        return tsymbol.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (!tsymbol.containsKey(id)) {
            tsymbol.replace(id, value);
        } else {
            tsymbol.put(id, value);
        }
    }

    public void printVars(PrintStream out) {
        if (tsymbol.isEmpty()) {
            out.println("No hi ha variables declarades");
        } else {
            String fmt = "%-8s: %f";
            tsymbol.forEach((k, v) -> out.println(String.format(fmt, k, v)));
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= XAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Xava start_val = (Xava)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // XAVA ::= DECLGLOB MAIN_FN FUNCIONES 
            {
              Xava RESULT =null;
		int gdeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gdeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclGlob gdecls = (DeclGlob)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Main_fn main = (Main_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Funciones funciones = (Funciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Xava(gdecls, main, funciones);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("XAVA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN_FN ::= PRINCIPAL LLAVE_A FSENTS LLAVE_C 
            {
              Main_fn RESULT =null;
		int f_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int f_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FSents f_sents = (FSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Main_fn(f_sents);                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_FN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLGLOB ::= DECLS 
            {
              DeclGlob RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclGlob(decls);                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLGLOB",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLGLOB ::= 
            {
              DeclGlob RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLGLOB",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLS ::= DECL DECLS 
            {
              Decls RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decls(decl, decls);                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLS ::= DECL 
            {
              Decls RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decls(decl);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCIONES ::= FUNCIONG FUNCIONES 
            {
              Funciones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncionG f = (FuncionG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Funciones funciones = (Funciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Funciones(f, funciones);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= 
            {
              Funciones RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONG ::= FUNCION CAP LLAVE_A FSENTS LLAVE_C 
            {
              FuncionG RESULT =null;
		int capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Cap cap = (Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int f_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int f_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FSents f_sents = (FSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncionG(cap, f_sents);                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONG",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CAP ::= STYPE ID ARGS_CAP 
            {
              Cap RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int args_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int args_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args_Cap args_cap = (Args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cap(stype, id, args_cap);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CAP ::= VACIO ID ARGS_CAP 
            {
              Cap RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int args_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int args_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args_Cap args_cap = (Args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cap(id, args_cap);                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STYPE ::= ENTERO 
            {
              SType RESULT =null;
		 RESULT = SType.ENTERO;                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STYPE ::= BOOLEANO 
            {
              SType RESULT =null;
		 RESULT = SType.BOOLEANO;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STYPE ::= CARACTER 
            {
              SType RESULT =null;
		 RESULT = SType.CARACTER;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARGS_CAP ::= PAR_A L_ARGS_CAP PAR_C 
            {
              Args_Cap RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Cap args = (L_args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Cap(args);                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CAP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGS_CAP ::= PAR_A PAR_C 
            {
              Args_Cap RESULT =null;
		 RESULT = new Args_Cap(null);                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CAP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARGS_CALL ::= PAR_A L_ARGS_CALL PAR_C 
            {
              Args_Call RESULT =null;
		int l_args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l_args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Call l_args_call = (L_args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Call(l_args_call);                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CALL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARGS_CALL ::= PAR_A PAR_C 
            {
              Args_Call RESULT =null;
		 RESULT = new Args_Call(null);                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CALL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // L_ARGS_CAP ::= STYPE ID COMA L_ARGS_CAP 
            {
              L_args_Cap RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_args_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_args_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Cap l_args_cap = (L_args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Cap(stype, id, l_args_cap);      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CAP",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // L_ARGS_CAP ::= STYPE ID 
            {
              L_args_Cap RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Cap(stype, id);                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CAP",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // L_ARGS_CALL ::= ID 
            {
              L_args_Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Call(id);                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CALL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // L_ARGS_CALL ::= ID COMA L_ARGS_CALL 
            {
              L_args_Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Call l_args_call = (L_args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Call(id, l_args_call);           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CALL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FSENTS ::= SENTS RET_PROC 
            {
              FSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ret_procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ret_procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetProc ret_proc = (RetProc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FSents(sents, ret_proc);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FSENTS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FSENTS ::= SENTS 
            {
              FSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FSents(sents);                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FSENTS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RET_PROC ::= DEVUELVE E P_COMA 
            {
              RetProc RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RetProc(exp);                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RET_PROC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTS ::= SENT SENTS 
            {
              Sents RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sents(sent, sents);                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTS ::= 
            {
              Sents RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENT ::= DECL 
            {
              Sent RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sent(decl);                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENT ::= INST 
            {
              Sent RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sent(inst);                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECL ::= TYPE LID DASIGNACION P_COMA 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Lid lid = (Lid)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int d_asignacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int d_asignacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		D_asig d_asignacion = (D_asig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Decl(type, lid, d_asignacion);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECL ::= TYPE ID CORCHETE_A DIGITO CORCHETE_C P_COMA 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Decl(type, id, num);                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= SI PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C CONT_COND 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cont_condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cont_condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cont_cond cont_cond = (Cont_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Inst("cond", exp, c_sents, null, null, cont_cond);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= PARA PAR_A DECL P_COMA E P_COMA DECL PAR_C LLAVE_A C_SENTS LLAVE_C 
            {
              Inst RESULT =null;
		int decl_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int decl_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Decl decl_cap = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Inst("para", exp, c_sents, decl_cap, decl, null);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INST ::= MIENTRAS PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Inst("mientras", exp, c_sents, null, null, null);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INST ::= HACER LLAVE_A C_SENTS LLAVE_C MIENTRAS PAR_A E PAR_C P_COMA 
            {
              Inst RESULT =null;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = new Inst("hacer_mientras", exp, c_sents, null, null, null);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INST ::= ID ASIG E P_COMA 
            {
              Inst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Inst("asig", id, exp);                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INST ::= IMPRIMIR PAR_A E PAR_C P_COMA 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Inst("impr", null, exp);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // C_SENTS ::= SENT C_SENTS 
            {
              C_sents RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new C_sents(sent, c_sents);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // C_SENTS ::= C_SENT C_SENTS 
            {
              C_sents RESULT =null;
		int c_sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sent c_sent = (C_sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new C_sents(c_sent, c_sents);            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // C_SENTS ::= 
            {
              C_sents RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // C_SENT ::= ROMPER P_COMA 
            {
              C_sent RESULT =null;
		 RESULT = C_sent.ROMPER;                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // C_SENT ::= CONTINUAR P_COMA 
            {
              C_sent RESULT =null;
		 RESULT = C_sent.CONTINUAR;                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONT_COND ::= SINO LLAVE_A SENTS LLAVE_C 
            {
              Cont_cond RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Cont_cond(null, sents, null);           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONT_COND ::= SINOSI PAR_A E PAR_C LLAVE_A SENTS LLAVE_C CONT_COND 
            {
              Cont_cond RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cont_condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cont_condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cont_cond cont_cond = (Cont_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Cont_cond(exp, sents, cont_cond);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONT_COND ::= 
            {
              Cont_cond RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TYPE ::= STYPE 
            {
              Type RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(false, stype);                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TYPE ::= CONST STYPE 
            {
              Type RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SType stype = (SType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(true, stype);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DASIGNACION ::= ASIG E 
            {
              D_asig RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new D_asig(exp);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DASIGNACION ::= 
            {
              D_asig RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LID ::= ID COMA LID 
            {
              Lid RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lid lid = (Lid)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lid(id, lid);                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LID ::= ID 
            {
              Lid RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lid(id);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= ECOMP OPLOG E 
            {
              Exp RESULT =null;
		int ecompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Ecomp ecomp = (Ecomp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpLog oplog = (OpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(ecomp, oplog, exp);                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= ECOMP 
            {
              Exp RESULT =null;
		int ecompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ecomp ecomp = (Ecomp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(ecomp);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= ENTRADA 
            {
              Exp RESULT =null;
		int entradaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int entradaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Entrada entrada = (Entrada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(entrada);                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ENTRADA ::= LEERBOOL 
            {
              Entrada RESULT =null;
		 RESULT = Entrada.LEERBOOL;                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ENTRADA ::= LEERCAR 
            {
              Entrada RESULT =null;
		 RESULT = Entrada.LEERCAR;                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ENTRADA ::= LEERENT 
            {
              Entrada RESULT =null;
		 RESULT = Entrada.LEERENT;                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ECOMP ::= EARIT OPCOMP ECOMP 
            {
              Ecomp RESULT =null;
		int earitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Earit earit = (Earit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpComp opcomp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ecompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ecomp ecomp = (Ecomp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ecomp(earit, opcomp, ecomp);            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECOMP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ECOMP ::= EARIT 
            {
              Ecomp RESULT =null;
		int earitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Earit earit = (Earit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ecomp(earit);                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECOMP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ECOMP ::= VAL_BOL 
            {
              Ecomp RESULT =null;
		int val_bolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val_bolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val_bol = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ecomp(val_bol);                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECOMP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EARIT ::= VALUE OPARIT EARIT 
            {
              Earit RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpArit oparit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int earitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Earit earit = (Earit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Earit(value, oparit, earit);            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EARIT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EARIT ::= VALUE 
            {
              Earit RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Earit(value);                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EARIT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EARIT ::= PAR_A E PAR_C 
            {
              Earit RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Earit(exp);                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EARIT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALUE ::= DIGITO 
            {
              Value RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(num);                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALUE ::= CALL_FN 
            {
              Value RESULT =null;
		int call_fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int call_fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call_fn call_fn = (Call_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(call_fn);                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALUE ::= ID 
            {
              Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(id, null);                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALUE ::= COMILLAS CARACTER COMILLAS 
            {
              Value RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Value(car, null, null);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CALL_FN ::= ID ARGS_CALL 
            {
              Call_fn RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args_Call args_call = (Args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Call_fn(id, args_call);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPLOG ::= Y 
            {
              OpLog RESULT =null;
		 RESULT = OpLog.Y;                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPLOG ::= O 
            {
              OpLog RESULT =null;
		 RESULT = OpLog.O;                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPCOMP ::= IGUAL 
            {
              OpComp RESULT =null;
		 RESULT = OpComp.IGUAL;                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPCOMP ::= MAQ 
            {
              OpComp RESULT =null;
		 RESULT = OpComp.MAQ;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPCOMP ::= MEQ 
            {
              OpComp RESULT =null;
		 RESULT = OpComp.MEQ;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPCOMP ::= MAI 
            {
              OpComp RESULT =null;
		 RESULT = OpComp.MAI;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPCOMP ::= MEI 
            {
              OpComp RESULT =null;
		 RESULT = OpComp.MEI;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPARIT ::= SUMA 
            {
              OpArit RESULT =null;
		 RESULT = OpArit.SUMA;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPARIT ::= RESTA 
            {
              OpArit RESULT =null;
		 RESULT = OpArit.RESTA;                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPARIT ::= MULT 
            {
              OpArit RESULT =null;
		 RESULT = OpArit.MULT;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPARIT ::= DIV 
            {
              OpArit RESULT =null;
		 RESULT = OpArit.DIV;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPARIT ::= MOD 
            {
              OpArit RESULT =null;
		 RESULT = OpArit.MOD;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
