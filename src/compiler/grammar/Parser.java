
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.grammar;

import compiler.ErrorC;
import compiler.sintactic.*;
import compiler.sintactic.Symbols.*;
import java_cup.runtime.ComplexSymbolFactory;

import java.util.ArrayList;
import java.util.List;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\003\005\000\002\005" +
    "\007\000\002\004\004\000\002\023\004\000\002\023\002" +
    "\000\002\024\010\000\002\025\005\000\002\025\004\000" +
    "\002\026\006\000\002\026\004\000\002\027\004\000\002" +
    "\027\002\000\002\006\004\000\002\006\002\000\002\007" +
    "\007\000\002\010\005\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\005\000\002\013\004\000\002\015\005\000\002" +
    "\015\004\000\002\014\006\000\002\014\004\000\002\016" +
    "\003\000\002\016\005\000\002\017\004\000\002\017\003" +
    "\000\002\020\005\000\002\021\004\000\002\021\002\000" +
    "\002\022\003\000\002\022\003\000\002\030\006\000\002" +
    "\030\006\000\002\031\006\000\002\031\005\000\002\032" +
    "\012\000\002\032\013\000\002\032\011\000\002\032\013" +
    "\000\002\032\006\000\002\032\006\000\002\032\007\000" +
    "\002\032\004\000\002\033\004\000\002\033\004\000\002" +
    "\033\002\000\002\034\004\000\002\034\004\000\002\034" +
    "\003\000\002\035\006\000\002\035\012\000\002\035\002" +
    "\000\002\036\003\000\002\036\004\000\002\037\004\000" +
    "\002\037\002\000\002\040\005\000\002\040\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\041" +
    "\005\000\002\041\003\000\002\041\004\000\002\042\005" +
    "\000\002\042\003\000\002\043\005\000\002\043\003\000" +
    "\002\046\003\000\002\046\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\005\000\002\050\003\000\002\051\003\000\002\051\003" +
    "\000\002\052\004\000\002\053\006\000\002\053\005\000" +
    "\002\054\004\000\002\002\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\016\013\005\014\004\015\014\016\015\021" +
    "\ufff5\030\ufff5\001\002\000\006\053\uffed\062\uffed\001\002" +
    "\000\006\053\uffee\062\uffee\001\002\000\006\053\uffc7\062" +
    "\uffc7\001\002\000\004\002\316\001\002\000\006\021\uff9c" +
    "\030\ufffc\001\002\000\006\053\261\062\257\001\002\000" +
    "\016\013\005\014\004\015\014\016\015\021\ufff5\030\ufff5" +
    "\001\002\000\004\030\uff9c\001\002\000\006\053\uffec\062" +
    "\uffec\001\002\000\010\013\005\014\004\015\014\001\002" +
    "\000\006\053\uffc6\062\uffc6\001\002\000\006\002\ufff3\021" +
    "\227\001\002\000\004\030\021\001\002\000\004\051\022" +
    "\001\002\000\032\004\033\007\026\010\034\011\036\013" +
    "\005\014\004\015\014\016\015\024\025\052\uffdf\053\037" +
    "\062\027\001\002\000\004\062\225\001\002\000\034\004" +
    "\033\007\026\010\034\011\036\013\005\014\004\015\014" +
    "\016\015\022\uffdf\024\025\052\uffdf\053\037\062\027\001" +
    "\002\000\004\047\220\001\002\000\004\047\210\001\002" +
    "\000\006\046\205\047\102\001\002\000\004\052\204\001" +
    "\002\000\040\004\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\022\uffde\023\uffde\024" +
    "\uffde\052\uffde\053\uffde\062\uffde\001\002\000\040\004\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\022\uffdd\023\uffdd\024\uffdd\052\uffdd\053\uffdd" +
    "\062\uffdd\001\002\000\004\047\161\001\002\000\004\047" +
    "\153\001\002\000\004\056\152\001\002\000\004\051\126" +
    "\001\002\000\030\017\046\020\051\025\055\026\042\027" +
    "\044\047\047\053\037\060\061\061\056\062\050\063\043" +
    "\001\002\000\004\046\041\001\002\000\030\017\046\020" +
    "\051\025\055\026\042\027\044\047\047\053\037\060\061" +
    "\061\056\062\050\063\043\001\002\000\044\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\050\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\001\002\000\044\031\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\050\uffa6\054\uffa6" +
    "\055\uffa6\056\uffa6\001\002\000\044\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\050\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\001\002\000\044\031\117\032\114\033\116" +
    "\034\120\035\115\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\050\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\001\002\000\044\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\050\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\001\002\000\030\017\046\020\051\025\055\026\042" +
    "\027\044\047\047\053\037\060\061\061\056\062\050\063" +
    "\043\001\002\000\046\031\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\047\102\050\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\001\002\000\044\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\050\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\001\002\000\004\056\101\001\002\000\044\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\050\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\001\002\000\032\036\uffba\037" +
    "\uffba\040\075\041\077\042\074\043\072\044\071\045\076" +
    "\050\uffba\054\uffba\055\uffba\056\uffba\001\002\000\044\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\050" +
    "\uffbf\054\uffbf\055\uffbf\056\uffbf\001\002\000\044\031\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\050\uffaa" +
    "\054\uffaa\055\uffaa\056\uffaa\001\002\000\044\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\050\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\001\002\000\016\036\067\037\066" +
    "\050\uffbd\054\uffbd\055\uffbd\056\uffbd\001\002\000\030\017" +
    "\046\020\051\025\055\026\042\027\044\047\047\053\037" +
    "\060\061\061\056\062\050\063\043\001\002\000\044\031" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\050" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\001\002\000\044\031\uffa7" +
    "\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\050\uffa7" +
    "\054\uffa7\055\uffa7\056\uffa7\001\002\000\012\050\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\001\002\000\030\017\046\020\051" +
    "\025\055\026\042\027\044\047\047\053\037\060\061\061" +
    "\056\062\050\063\043\001\002\000\030\017\uffb6\020\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\047\uffb6\053\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\063\uffb6\001\002\000\030\017\uffb7\020\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\047\uffb7\053\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\001\002\000\012\050\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\001\002\000\026\017\uffb1\020\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\047\uffb1\053\uffb1\061\uffb1\062\uffb1" +
    "\063\uffb1\001\002\000\026\017\uffb2\020\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\047\uffb2\053\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\001\002\000\026\017\046\020\051\025\055\026\042\027" +
    "\044\047\047\053\037\061\056\062\050\063\043\001\002" +
    "\000\026\017\uffb3\020\uffb3\025\uffb3\026\uffb3\027\uffb3\047" +
    "\uffb3\053\uffb3\061\uffb3\062\uffb3\063\uffb3\001\002\000\026" +
    "\017\uffb5\020\uffb5\025\uffb5\026\uffb5\027\uffb5\047\uffb5\053" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002\000\026\017\uffb0" +
    "\020\uffb0\025\uffb0\026\uffb0\027\uffb0\047\uffb0\053\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\001\002\000\026\017\uffb4\020\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\047\uffb4\053\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\001\002\000\016\036\uffbb\037\uffbb\050\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\001\002\000\042\004\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\022\uffd3\023\uffd3\024\uffd3\050\uffd3\052\uffd3\053" +
    "\uffd3\062\uffd3\001\002\000\032\017\046\020\051\025\055" +
    "\026\042\027\044\047\047\050\105\053\037\060\061\061" +
    "\056\062\050\063\043\001\002\000\044\031\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\050\uff9d\054\uff9d" +
    "\055\uff9d\056\uff9d\001\002\000\004\050\111\001\002\000" +
    "\044\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\050\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000\006" +
    "\050\uffe5\055\107\001\002\000\030\017\046\020\051\025" +
    "\055\026\042\027\044\047\047\053\037\060\061\061\056" +
    "\062\050\063\043\001\002\000\004\050\uffe4\001\002\000" +
    "\044\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\050\uffe9\054\uffe9\055\uffe9\056\uffe9\001\002\000\004" +
    "\050\113\001\002\000\044\031\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\050\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\001\002\000\026\017\uffae\020\uffae\025\uffae\026\uffae" +
    "\027\uffae\047\uffae\053\uffae\061\uffae\062\uffae\063\uffae\001" +
    "\002\000\026\017\uffab\020\uffab\025\uffab\026\uffab\027\uffab" +
    "\047\uffab\053\uffab\061\uffab\062\uffab\063\uffab\001\002\000" +
    "\026\017\uffad\020\uffad\025\uffad\026\uffad\027\uffad\047\uffad" +
    "\053\uffad\061\uffad\062\uffad\063\uffad\001\002\000\026\017" +
    "\uffaf\020\uffaf\025\uffaf\026\uffaf\027\uffaf\047\uffaf\053\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\001\002\000\026\017\uffac\020" +
    "\uffac\025\uffac\026\uffac\027\uffac\047\uffac\053\uffac\061\uffac" +
    "\062\uffac\063\uffac\001\002\000\026\017\046\020\051\025" +
    "\055\026\042\027\044\047\047\053\037\061\056\062\050" +
    "\063\043\001\002\000\032\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\050\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\001\002\000\004\054\124\001\002\000" +
    "\006\053\037\062\uff9e\001\002\000\004\062\uff9f\001\002" +
    "\000\040\004\033\007\026\010\034\011\036\012\130\013" +
    "\005\014\004\015\014\016\015\022\127\023\135\024\025" +
    "\052\uffce\053\037\062\027\001\002\000\030\017\046\020" +
    "\051\025\055\026\042\027\044\047\047\053\037\060\061" +
    "\061\056\062\050\063\043\001\002\000\004\056\147\001" +
    "\002\000\004\052\141\001\002\000\040\004\033\007\026" +
    "\010\034\011\036\012\130\013\005\014\004\015\014\016" +
    "\015\022\127\023\135\024\025\052\uffce\053\037\062\027" +
    "\001\002\000\040\004\033\007\026\010\034\011\036\012" +
    "\130\013\005\014\004\015\014\016\015\022\127\023\135" +
    "\024\025\052\uffce\053\037\062\027\001\002\000\040\004" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\022\uffcb\023\uffcb\024\uffcb\052\uffcb\053" +
    "\uffcb\062\uffcb\001\002\000\004\056\136\001\002\000\040" +
    "\004\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\022\uffcc\023\uffcc\024\uffcc\052\uffcc" +
    "\053\uffcc\062\uffcc\001\002\000\004\052\uffcf\001\002\000" +
    "\004\052\uffd0\001\002\000\004\010\142\001\002\000\004" +
    "\047\143\001\002\000\030\017\046\020\051\025\055\026" +
    "\042\027\044\047\047\053\037\060\061\061\056\062\050" +
    "\063\043\001\002\000\004\050\145\001\002\000\004\056" +
    "\146\001\002\000\042\004\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\050\uffd5\052\uffd5\053\uffd5\062\uffd5\001\002" +
    "\000\040\004\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\052\uffcd\053\uffcd\062\uffcd\001\002\000\004\056\151\001" +
    "\002\000\040\004\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\052\uffe1\053\uffe1\062\uffe1\001\002\000\042\004\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\022\uffd1\023\uffd1\024\uffd1\050\uffd1\052\uffd1" +
    "\053\uffd1\062\uffd1\001\002\000\030\017\046\020\051\025" +
    "\055\026\042\027\044\047\047\053\037\060\061\061\056" +
    "\062\050\063\043\001\002\000\004\050\155\001\002\000" +
    "\004\051\156\001\002\000\040\004\033\007\026\010\034" +
    "\011\036\012\130\013\005\014\004\015\014\016\015\022" +
    "\127\023\135\024\025\052\uffce\053\037\062\027\001\002" +
    "\000\004\052\160\001\002\000\042\004\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\050\uffd6\052\uffd6\053\uffd6\062" +
    "\uffd6\001\002\000\030\017\046\020\051\025\055\026\042" +
    "\027\044\047\047\053\037\060\061\061\056\062\050\063" +
    "\043\001\002\000\004\050\163\001\002\000\004\051\164" +
    "\001\002\000\040\004\033\007\026\010\034\011\036\012" +
    "\130\013\005\014\004\015\014\016\015\022\127\023\135" +
    "\024\025\052\uffce\053\037\062\027\001\002\000\004\052" +
    "\166\001\002\000\046\004\uffc8\005\170\006\171\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\050\uffc8\052\uffc8\053\uffc8" +
    "\062\uffc8\001\002\000\042\004\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\050\uffd8\052\uffd8\053\uffd8\062\uffd8\001" +
    "\002\000\004\051\201\001\002\000\004\047\172\001\002" +
    "\000\030\017\046\020\051\025\055\026\042\027\044\047" +
    "\047\053\037\060\061\061\056\062\050\063\043\001\002" +
    "\000\004\050\174\001\002\000\004\051\175\001\002\000" +
    "\040\004\033\007\026\010\034\011\036\012\130\013\005" +
    "\014\004\015\014\016\015\022\127\023\135\024\025\052" +
    "\uffce\053\037\062\027\001\002\000\004\052\177\001\002" +
    "\000\046\004\uffc8\005\170\006\171\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\050\uffc8\052\uffc8\053\uffc8\062\uffc8\001" +
    "\002\000\042\004\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\050\uffc9\052\uffc9\053\uffc9\062\uffc9\001\002\000\040" +
    "\004\033\007\026\010\034\011\036\012\130\013\005\014" +
    "\004\015\014\016\015\022\127\023\135\024\025\052\uffce" +
    "\053\037\062\027\001\002\000\004\052\203\001\002\000" +
    "\042\004\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\022\uffca\023\uffca\024\uffca\050" +
    "\uffca\052\uffca\053\uffca\062\uffca\001\002\000\006\002\uffff" +
    "\021\uffff\001\002\000\030\017\046\020\051\025\055\026" +
    "\042\027\044\047\047\053\037\060\061\061\056\062\050" +
    "\063\043\001\002\000\004\056\207\001\002\000\042\004" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\022\uffd4\023\uffd4\024\uffd4\050\uffd4\052" +
    "\uffd4\053\uffd4\062\uffd4\001\002\000\030\017\046\020\051" +
    "\025\055\026\042\027\044\047\047\053\037\060\061\061" +
    "\056\062\050\063\043\001\002\000\004\056\212\001\002" +
    "\000\020\004\033\007\026\010\034\011\036\024\025\053" +
    "\037\062\027\001\002\000\004\050\214\001\002\000\004" +
    "\051\215\001\002\000\040\004\033\007\026\010\034\011" +
    "\036\012\130\013\005\014\004\015\014\016\015\022\127" +
    "\023\135\024\025\052\uffce\053\037\062\027\001\002\000" +
    "\004\052\217\001\002\000\042\004\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\050\uffd7\052\uffd7\053\uffd7\062\uffd7" +
    "\001\002\000\030\017\046\020\051\025\055\026\042\027" +
    "\044\047\047\053\037\060\061\061\056\062\050\063\043" +
    "\001\002\000\004\050\222\001\002\000\004\056\223\001" +
    "\002\000\042\004\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\050\uffd2\052\uffd2\053\uffd2\062\uffd2\001\002\000\006" +
    "\022\uffe0\052\uffe0\001\002\000\046\031\uffa0\032\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\001\002\000\006\002\ufff3\021\227" +
    "\001\002\000\012\013\005\014\004\015\014\057\234\001" +
    "\002\000\004\002\000\001\002\000\004\051\247\001\002" +
    "\000\004\062\ufff0\001\002\000\004\062\235\001\002\000" +
    "\004\062\uffef\001\002\000\004\047\236\001\002\000\012" +
    "\013\005\014\004\015\014\050\240\001\002\000\004\051" +
    "\ufff1\001\002\000\004\051\uffea\001\002\000\004\062\244" +
    "\001\002\000\004\050\243\001\002\000\004\051\uffeb\001" +
    "\002\000\006\050\uffe6\055\245\001\002\000\010\013\005" +
    "\014\004\015\014\001\002\000\004\050\uffe7\001\002\000" +
    "\034\004\033\007\026\010\034\011\036\013\005\014\004" +
    "\015\014\016\015\022\uffdf\024\025\052\uffdf\053\037\062" +
    "\027\001\002\000\004\052\253\001\002\000\006\022\127" +
    "\052\uffe2\001\002\000\004\052\uffe3\001\002\000\006\002" +
    "\ufff2\021\ufff2\001\002\000\004\002\ufff4\001\002\000\006" +
    "\021\ufff6\030\ufff6\001\002\000\004\062\273\001\002\000" +
    "\010\046\uffc2\055\271\056\uffc2\001\002\000\006\046\266" +
    "\056\uffc4\001\002\000\004\061\262\001\002\000\004\054" +
    "\263\001\002\000\006\053\261\062\uffd9\001\002\000\004" +
    "\062\uffda\001\002\000\004\056\270\001\002\000\030\017" +
    "\046\020\051\025\055\026\042\027\044\047\047\053\037" +
    "\060\061\061\056\062\050\063\043\001\002\000\004\056" +
    "\uffc5\001\002\000\044\004\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\030\uffdc\052\uffdc\053\uffdc\062\uffdc" +
    "\001\002\000\004\062\257\001\002\000\006\046\uffc3\056" +
    "\uffc3\001\002\000\004\056\274\001\002\000\044\004\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\030\uffdb" +
    "\052\uffdb\053\uffdb\062\uffdb\001\002\000\004\030\ufffe\001" +
    "\002\000\006\021\uff9c\030\ufffc\001\002\000\004\021\300" +
    "\001\002\000\012\013\005\014\004\015\014\057\234\001" +
    "\002\000\004\062\302\001\002\000\004\047\303\001\002" +
    "\000\012\013\005\014\004\015\014\050\306\001\002\000" +
    "\004\056\305\001\002\000\006\021\ufffb\030\ufffb\001\002" +
    "\000\004\056\ufff9\001\002\000\004\062\312\001\002\000" +
    "\004\050\311\001\002\000\004\056\ufffa\001\002\000\006" +
    "\050\ufff7\055\313\001\002\000\010\013\005\014\004\015" +
    "\014\001\002\000\004\050\ufff8\001\002\000\004\030\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\016\003\006\004\012\012\005\027\007\030" +
    "\011\036\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\276\023" +
    "\274\024\275\001\001\000\006\031\255\040\257\001\001" +
    "\000\012\012\005\027\254\030\011\036\010\001\001\000" +
    "\006\002\017\005\016\001\001\000\002\001\001\000\004" +
    "\012\015\001\001\000\002\001\001\000\006\006\227\007" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\012\005\021\027\022\023\030\030\032\031\036\010\052" +
    "\037\053\022\054\034\001\001\000\002\001\001\000\024" +
    "\012\005\021\223\022\023\030\030\032\031\036\010\052" +
    "\037\053\022\054\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\041" +
    "\122\042\057\043\053\044\056\050\044\051\052\052\062" +
    "\053\022\054\061\001\001\000\002\001\001\000\024\041" +
    "\051\042\057\043\053\044\056\050\044\051\052\052\062" +
    "\053\022\054\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\120\001\001\000\002" +
    "\001\001\000\024\041\111\042\057\043\053\044\056\050" +
    "\044\051\052\052\062\053\022\054\061\001\001\000\004" +
    "\015\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\064\001" +
    "\001\000\024\041\063\042\057\043\053\044\056\050\044" +
    "\051\052\052\062\053\022\054\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\041\067" +
    "\042\057\043\053\044\056\050\044\051\052\052\062\053" +
    "\022\054\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\043\077\044\056\050\044\051\052\052\062\053\022" +
    "\054\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\016\103\041\105\042\057\043\053\044" +
    "\056\050\044\051\052\052\062\053\022\054\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\016\107\041\105\042\057\043\053" +
    "\044\056\050\044\051\052\052\062\053\022\054\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\043\121\044\056\050\044\051\052\052\062\053\022\054" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\124\001\001\000\002\001\001\000\030\012\005\020" +
    "\133\022\131\030\030\032\031\033\130\034\132\036\010" +
    "\052\037\053\022\054\034\001\001\000\024\041\147\042" +
    "\057\043\053\044\056\050\044\051\052\052\062\053\022" +
    "\054\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\005\020\133\022\131\030\030\032\031\033\137" +
    "\034\132\036\010\052\037\053\022\054\034\001\001\000" +
    "\030\012\005\020\133\022\131\030\030\032\031\033\136" +
    "\034\132\036\010\052\037\053\022\054\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\041\143\042\057\043\053\044\056\050\044" +
    "\051\052\052\062\053\022\054\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\041\153\042\057\043\053\044\056\050\044\051\052" +
    "\052\062\053\022\054\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\012\005\020\133\022\131\030\030" +
    "\032\031\033\156\034\132\036\010\052\037\053\022\054" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\041\161\042\057\043\053\044\056\050\044\051\052\052" +
    "\062\053\022\054\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\005\020\133\022\131\030\030\032" +
    "\031\033\164\034\132\036\010\052\037\053\022\054\034" +
    "\001\001\000\002\001\001\000\004\035\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\041\172\042\057\043\053\044\056\050\044\051\052\052" +
    "\062\053\022\054\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\005\020\133\022\131\030\030\032" +
    "\031\033\175\034\132\036\010\052\037\053\022\054\034" +
    "\001\001\000\002\001\001\000\004\035\177\001\001\000" +
    "\002\001\001\000\030\012\005\020\133\022\131\030\030" +
    "\032\031\033\201\034\132\036\010\052\037\053\022\054" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\041\205\042\057\043\053\044\056\050" +
    "\044\051\052\052\062\053\022\054\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\041\210\042\057\043" +
    "\053\044\056\050\044\051\052\052\062\053\022\054\061" +
    "\001\001\000\002\001\001\000\012\032\212\052\037\053" +
    "\022\054\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\012\005\020\133\022\131\030\030\032\031\033" +
    "\215\034\132\036\010\052\037\053\022\054\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\041\220\042" +
    "\057\043\053\044\056\050\044\051\052\052\062\053\022" +
    "\054\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\253\007\225\001\001\000\010\010\230\011\232\012" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\236\001\001\000\006\012\240\014\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\240" +
    "\014\245\001\001\000\002\001\001\000\026\012\005\017" +
    "\247\021\250\022\023\030\030\032\031\036\010\052\037" +
    "\053\022\054\034\001\001\000\002\001\001\000\004\020" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\041\266\042\057\043\053\044\056" +
    "\050\044\051\052\052\062\053\022\054\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\276\023\314\024\275\001\001" +
    "\000\002\001\001\000\006\011\300\012\231\001\001\000" +
    "\002\001\001\000\004\025\303\001\001\000\006\012\306" +
    "\026\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\306\026\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Xava xava;
    private ComplexSymbolFactory csf = new ComplexSymbolFactory();
    public TSimbolos tSimbolos = new TSimbolos();
    AnSem ansem = new AnSem(tSimbolos);

    public TSimbolos getTSimbolos() {
        return tSimbolos;
    }

    public Xava getXavaArbol() {
        return xava;
    }


    @Override
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        String message = "Esperábamos " + this.showExpectedTokenIds();
        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
        ErrorC.añadirError(new ErrorC(message, cs.getLeft().getLine(), cs.getLeft().getColumn(), Fase.SINTÁCTICO));
    }

    // Busca cuales son los tokens esperados
    private String showExpectedTokenIds() {
        List<String> list = this.expected_token_ids().stream().map(this::symbl_name_from_id).toList();
        return (!list.isEmpty()) ? list.toString() : "something else";
    }

    private int getDimensionesArray(L_array list_array) {
        int dimensiones = 0;
        for (L_array aux = list_array; aux != null; aux = aux.getlArray()) {
            dimensiones++;
        }
        return dimensiones;
    }


    // Ignoramos los errores de JavaCup que no nos interesan para nuestro compilador
    @Override
    public void report_fatal_error(String message, Object info) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= XAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Xava start_val = (Xava)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // XAVA ::= DECLGLOB MAIN_FN FUNCIONES 
            {
              Xava RESULT =null;
		int gdeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gdeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclGlob gdecls = (DeclGlob)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Main_fn main = (Main_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Funciones funciones = (Funciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        xava = new Xava(gdecls, main, funciones, 0, 0);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("XAVA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN_FN ::= M PRINCIPAL LLAVE_A SENTS LLAVE_C 
            {
              Main_fn RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Main_fn(sents, sentsleft, sentsright);                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_FN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLGLOB ::= DECLS DECLSF 
            {
              DeclGlob RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclsF declsf = (DeclsF)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new DeclGlob(declsf, decls, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLGLOB",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLSF ::= DECLF DECLSF 
            {
              DeclsF RESULT =null;
		int declfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclF declf = (DeclF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclsF declsf = (DeclsF)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclsF(declf, declsf, declfleft, declfright);                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLSF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLSF ::= 
            {
              DeclsF RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLSF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLF ::= M FUNCION ETYPE ID ARGS_DECLF P_COMA 
            {
              DeclF RESULT =null;
		int eTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		EnumType eType = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int args_declfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int args_declfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Args_Declf args_declf = (Args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  if (!tSimbolos.ponerSymbol(new Symbol(id, TipoElemento.FUNCION, eType, null, true))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la función ha sido declarada anteriormente o el nombre de la función ya está usada
                            ErrorC.añadirError(new ErrorC("Función " + id + "declarada previamente", idleft, Fase.SEMÁNTICO));
                        }
                        if (id.equals("principal")) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // La función no puede llamarse Main
                            ErrorC.añadirError(new ErrorC("No se puede crear una función llamada principal", idleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new DeclF(eType, id, args_declf, eTypeleft, eTyperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLF",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARGS_DECLF ::= PAR_A L_ARGS_DECLF PAR_C 
            {
              Args_Declf RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Declf args = (L_args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Args_Declf(args, args.getLinea(), args.getColumna());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_DECLF",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ARGS_DECLF ::= PAR_A PAR_C 
            {
              Args_Declf RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_DECLF",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_ARGS_DECLF ::= STYPE ID COMA L_ARGS_DECLF 
            {
              L_args_Declf RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Declf args = (L_args_Declf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (!tSimbolos.ponerSymbol(new Symbol(id, TipoElemento.PARAMETRO, stype, null, false))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                            ErrorC.añadirError(new ErrorC("Variable " + id + "declarada previamente", idleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new L_args_Declf(stype, id, args, stypeleft, styperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_DECLF",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_ARGS_DECLF ::= STYPE ID 
            {
              L_args_Declf RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if (!tSimbolos.ponerSymbol(new Symbol(id, TipoElemento.PARAMETRO, stype, null, false))) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                            ErrorC.añadirError(new ErrorC("Variable " + id + "declarada previamente", idleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new L_args_Declf(stype, id, stypeleft, styperight);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_DECLF",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLS ::= DECL DECLS 
            {
              Decls RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decls(decl, decls, declleft, declright);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLS ::= 
            {
              Decls RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES ::= FUNCIONG FUNCIONES 
            {
              Funciones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncionG f = (FuncionG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Funciones funciones = (Funciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Funciones(f, funciones, fleft,fright);                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES ::= 
            {
              Funciones RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCIONG ::= FUNCION CAP LLAVE_A FSENTS LLAVE_C 
            {
              FuncionG RESULT =null;
		int capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Cap cap = (Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int f_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int f_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FSents f_sents = (FSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (ansem.existeFuncion(cap)) {
                            ansem.isReturn(f_sents);
                        }
                        RESULT = new FuncionG(cap, f_sents, capleft, capright);

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONG",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CAP ::= ETYPE ID ARGS_CAP 
            {
              Cap RESULT =null;
		int etypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int etyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		EnumType etype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int args_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int args_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args_Cap args_cap = (Args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        try {
                            tSimbolos.updatenActual(id);
                        } catch (IndexOutOfBoundsException e){
                            // MANEJO DE ERRORES SEMANTICOS
                            // No se puede acceder a la función
                        }

                        RESULT = new Cap(etype, id, args_cap, etypeleft, etyperight);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ETYPE ::= STYPE 
            {
              EnumType RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stype;                                                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ETYPE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ETYPE ::= VACIO 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.VACIO;                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ETYPE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STYPE ::= ENTERO 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.ENTERO;                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STYPE ::= BOOLEANO 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.BOOLEANO;                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STYPE ::= CARACTER 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.CARACTER;                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STYPE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGS_CAP ::= PAR_A L_ARGS_CAP PAR_C 
            {
              Args_Cap RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Cap args = (L_args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Cap(args, args.getLinea(), args.getColumna());                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CAP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGS_CAP ::= PAR_A PAR_C 
            {
              Args_Cap RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CAP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGS_CALL ::= PAR_A L_ARGS_CALL PAR_C 
            {
              Args_Call RESULT =null;
		int l_args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l_args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_args_Call l_args_call = (L_args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Args_Call(l_args_call, l_args_call.getLinea(), l_args_call.getColumna());      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CALL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGS_CALL ::= PAR_A PAR_C 
            {
              Args_Call RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_CALL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_ARGS_CAP ::= STYPE ID COMA L_ARGS_CAP 
            {
              L_args_Cap RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_args_capleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_args_capright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Cap l_args_cap = (L_args_Cap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Cap(stype, id, l_args_cap, stypeleft, styperight);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_ARGS_CAP ::= STYPE ID 
            {
              L_args_Cap RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Cap(stype, id, stypeleft, styperight);                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_ARGS_CALL ::= E 
            {
              L_args_Call RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Call(exp, expleft, expright);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L_ARGS_CALL ::= E COMA L_ARGS_CALL 
            {
              L_args_Call RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_args_Call l_args_call = (L_args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_args_Call(exp, l_args_call, expleft, expright);                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARGS_CALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FSENTS ::= SENTS RET_PROC 
            {
              FSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ret_procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ret_procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetProc ret_proc = (RetProc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FSents(sents, ret_proc, sentsleft, sentsright);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FSENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FSENTS ::= SENTS 
            {
              FSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FSents(sents, sentsleft, sentsright);                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FSENTS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RET_PROC ::= DEVUELVE E P_COMA 
            {
              RetProc RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RetProc(exp, expleft, expright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RET_PROC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTS ::= SENT SENTS 
            {
              Sents RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sents sents = (Sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sents(sent, sents, sentleft, sentright);                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTS ::= 
            {
              Sents RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= DECL 
            {
              Sent RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sent(decl, declleft, declright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= INST 
            {
              Sent RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sent(inst, instleft, instright);                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECL ::= TYPE LID DASIGNACION P_COMA 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Lid lid = (Lid)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int d_asignacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int d_asignacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		D_asig d_asignacion = (D_asig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (d_asignacion != null) {
                            ansem.gestAsig(type.getStype(), d_asignacion.getE());
                        } else {
                            if (type.getConstante()) {
                            ErrorC.añadirError(new ErrorC("Las constantes deben tener un valor asignado", type.getLinea(), Fase.SEMÁNTICO));
                            }
                        }
                        for (Lid aux = lid; aux != null; aux = aux.getLid()) {
                            if (!tSimbolos.ponerSymbol(new Symbol(aux.getId(), TipoElemento.VARIABLE, type.getStype(), null, type.getConstante()))) {
                                // MANEJO DE ERRORES SEMANTICOS
                                // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                                ErrorC.añadirError(new ErrorC("Variable declarada previamente", aux.getLinea(), Fase.SEMÁNTICO));
                            }
                        }

                        RESULT = new Decl(type, lid, d_asignacion, typeleft, typeright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECL ::= TYPE L_DIM ID P_COMA 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int l_dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int l_dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		L_Dim l_dim = (L_Dim)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (!type.getConstante()) {
                            // Se pasan las dimensiones a ArrayList
                            ArrayList<Integer> dimensiones = new ArrayList<>();
                            for (L_Dim aux = l_dim; aux != null; aux = aux.getL_dim()) {
                                dimensiones.add(aux.getNum());
                            }

                            if (!tSimbolos.ponerSymbol(new Symbol(id, TipoElemento.ARRAY, type.getStype(), dimensiones, false))) {
                                // MANEJO DE ERRORES SEMANTICOS
                                // O la variable ha sido declarada anteriormente o el nombre de la variable ya está usada
                                ErrorC.añadirError(new ErrorC("Variable " + id + "declarada previamente", idleft, Fase.SEMÁNTICO));
                            }
                        } else {
                            // MANEJO DE ERRORES SEMANTICOS
                            // No se puede declarar un array de tipo constante
                            ErrorC.añadirError(new ErrorC("Un array no puede ser constante", typeleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new Decl(type, id, l_dim, typeleft, typeright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L_DIM ::= CORCHETE_A DIGITO CORCHETE_C L_DIM 
            {
              L_Dim RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_Dim l_dim = (L_Dim)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if (Integer.parseInt(num) <= 0) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // El tamaño del array debe ser mayor que 0
                            ErrorC.añadirError(new ErrorC("El tamaño del array debe ser mayor que 0", numleft, Fase.SEMÁNTICO));
                        }
                        RESULT = new L_Dim(num, l_dim, numleft, numright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_DIM",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L_DIM ::= CORCHETE_A DIGITO CORCHETE_C 
            {
              L_Dim RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                       if (Integer.parseInt(num) <= 0) {
                           // MANEJO DE ERRORES SEMANTICOS
                           // El tamaño del array debe ser mayor que 0
                           ErrorC.añadirError(new ErrorC("El tamaño del array debe ser mayor que 0", numleft, Fase.SEMÁNTICO));
                       }
                       RESULT = new L_Dim(num, null, numleft, numright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_DIM",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= SI PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C CONT_COND 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cont_condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cont_condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cont_cond cont_cond = (Cont_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Inst("cond", exp, c_sents, null, cont_cond, null, expleft, expright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= PARA PAR_A E P_COMA INST PAR_C LLAVE_A C_SENTS LLAVE_C 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (ansem.gestExp(exp) != EnumType.BOOLEANO) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // La expresión de condición de salida tiene que dar como resultado un valor booleano
                            ErrorC.añadirError(new ErrorC("La condición de salida debe ser booleana", exp.getLinea(), Fase.SEMÁNTICO));
                        }
                        if (inst.getType() != "asig") {
                            // MANEJO DE ERRORES SEMANTICOS
                            // La instrucción del para debe ser una asignación
                            ErrorC.añadirError(new ErrorC("La instrucción del para debe ser una asignación", inst.getLinea(), Fase.SEMÁNTICO));
                        }
                        RESULT = new Inst("para", exp, c_sents, inst, null, null, expleft, expright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= MIENTRAS PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (ansem.gestExp(exp) != EnumType.BOOLEANO) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // La expresión de condición de salida tiene que dar como resultado un valor booleano
                            ErrorC.añadirError(new ErrorC("La condición de salida debe ser booleana", exp.getLinea(), Fase.SEMÁNTICO));
                        }
                        RESULT = new Inst("mientras", exp, c_sents, null, null, null, expleft, expright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= HACER LLAVE_A C_SENTS LLAVE_C MIENTRAS PAR_A E PAR_C P_COMA 
            {
              Inst RESULT =null;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        if (ansem.gestExp(exp) != EnumType.BOOLEANO) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // La expresión de condición de salida tiene que dar como resultado un valor booleano
                            ErrorC.añadirError(new ErrorC("La condición de salida debe ser booleana", exp.getLinea(), Fase.SEMÁNTICO));
                        }
                        RESULT = new Inst("hacer_mientras", exp, c_sents, null, null, null, c_sentsleft, c_sentsright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= ID ASIG E P_COMA 
            {
              Inst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Symbol symbol = tSimbolos.getSymbol(id);
                        if (symbol.isEsConst()) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // No se puede asignar un valor a una constante
                            ErrorC.añadirError(new ErrorC("No se puede modificar una constante", idleft, Fase.SEMÁNTICO));
                        } else {
                            ansem.gestAsig(symbol.getTipoReturn(), exp);
                        }
                        RESULT = new Inst("asig", id, null, exp, idleft, idright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INST ::= ARRAY ASIG E P_COMA 
            {
              Inst RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayG array = (ArrayG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Symbol symbol = tSimbolos.getSymbol(array.getId());
                        ansem.gestAsig(symbol.getTipoReturn(), exp);
                        RESULT = new Inst("asig", array.getId(), array, exp, arrayleft, arrayright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INST ::= IMPRIMIR PAR_A E PAR_C P_COMA 
            {
              Inst RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Inst("impr", null, null, exp, expleft, expright);                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INST ::= CALL_FN P_COMA 
            {
              Inst RESULT =null;
		int call_fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int call_fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call_fn call_fn = (Call_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Symbol symbol = tSimbolos.getSymbol(call_fn.getId());
                        if (symbol.getTipoReturn() != EnumType.VACIO) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // La función no devuelve nada
                            ErrorC.añadirError(new ErrorC("La función devuelve nada", call_fn.getLinea(), Fase.SEMÁNTICO));
                        }
                        RESULT = new Inst("call_fn", null, null, null, null, call_fn, call_fnleft, call_fnright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // C_SENTS ::= SENT C_SENTS 
            {
              C_sents RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new C_sents(sent, c_sents, sentleft, sentright);                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // C_SENTS ::= C_SENT C_SENTS 
            {
              C_sents RESULT =null;
		int c_sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sent c_sent = (C_sent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new C_sents(c_sent, c_sents, c_sentleft, c_sentright);              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // C_SENTS ::= 
            {
              C_sents RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENTS",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // C_SENT ::= ROMPER P_COMA 
            {
              C_sent RESULT =null;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new C_sent("Romper", null, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // C_SENT ::= CONTINUAR P_COMA 
            {
              C_sent RESULT =null;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new C_sent("Continuar", null, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // C_SENT ::= RET_PROC 
            {
              C_sent RESULT =null;
		int ret_procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ret_procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetProc ret_proc = (RetProc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ansem.gestReturnFunc(ret_proc);
                       RESULT = new C_sent("ret_proc", ret_proc, ret_procleft, ret_procright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONT_COND ::= SINO LLAVE_A C_SENTS LLAVE_C 
            {
              Cont_cond RESULT =null;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Cont_cond(null, c_sents, null, c_sentsleft, c_sentsright);            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONT_COND ::= SINOSI PAR_A E PAR_C LLAVE_A C_SENTS LLAVE_C CONT_COND 
            {
              Cont_cond RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int c_sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c_sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		C_sents c_sents = (C_sents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cont_condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cont_condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cont_cond cont_cond = (Cont_cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Cont_cond(exp, c_sents, cont_cond, expleft, expright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONT_COND ::= 
            {
              Cont_cond RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_COND",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TYPE ::= STYPE 
            {
              Type RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new Type(false, stype, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TYPE ::= CONST STYPE 
            {
              Type RESULT =null;
		int stypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EnumType stype = (EnumType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new Type(true, stype, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DASIGNACION ::= ASIG E 
            {
              D_asig RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new D_asig(exp, expleft, expright);                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DASIGNACION",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DASIGNACION ::= 
            {
              D_asig RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DASIGNACION",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LID ::= ID COMA LID 
            {
              Lid RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lid lid = (Lid)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lid(id, lid, idleft, idright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LID ::= ID 
            {
              Lid RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lid(id, idleft, idright);                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ENTRADA ::= LEERBOOL 
            {
              Entrada RESULT =null;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new Entrada(EnumType.BOOLEANO, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENTRADA ::= LEERCAR 
            {
              Entrada RESULT =null;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new Entrada(EnumType.CARACTER, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ENTRADA ::= LEERENT 
            {
              Entrada RESULT =null;
		
                        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) cur_token;
                        RESULT = new Entrada(EnumType.ENTERO, cs.getLeft().getLine(), cs.getLeft().getColumn());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADA",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= ECOMP OPLOG E 
            {
              Exp RESULT =null;
		int ecompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ecomp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Op op = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (ansem.gestExp(ecomp) != EnumType.BOOLEANO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // Solo se puede hacer uso de operadores lógicos con valores booleanos
                        ErrorC.añadirError(new ErrorC("Se esperaba una expresión de tipo booleano", exp.getLinea(), Fase.SEMÁNTICO));
                    }
                    if (ansem.gestExp(ecomp) != EnumType.BOOLEANO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // Solo se puede hacer uso de operadores lógicos con valores booleanos
                        ErrorC.añadirError(new ErrorC("Se esperaba una expresión de tipo booleano", exp.getLinea(), Fase.SEMÁNTICO));
                    }
                    RESULT = new Exp(ecomp, op, exp, ecompleft, ecompright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= ECOMP 
            {
              Exp RESULT =null;
		int ecompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ecomp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(ecomp, ecompleft, ecompright, false);                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= NO E 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (ansem.gestExp(exp) != EnumType.BOOLEANO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // Solo se puede negar un booleano
                        ErrorC.añadirError(new ErrorC("Se esperaba una expresión de tipo booleano", exp.getLinea(), Fase.SEMÁNTICO));
                    }
                    RESULT = new Exp(exp, expleft, expright, true);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ECOMP ::= EARI OPCOMP EARI 
            {
              Exp RESULT =null;
		int eArileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eAriright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp eAri = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Op op = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eAri2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eAri2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp eAri2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (ansem.gestExp(eAri) != EnumType.ENTERO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // Solo se pueden comparar enteros
                        ErrorC.añadirError(new ErrorC("Se esperaba una expresión de tipo entero", eAri.getLinea(), Fase.SEMÁNTICO));
                    }
                    if (ansem.gestExp(eAri2) != EnumType.ENTERO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // Solo se pueden comparar enteros
                        ErrorC.añadirError(new ErrorC("Se esperaba una expresión de tipo entero", eAri2.getLinea(), Fase.SEMÁNTICO));
                    }
                    RESULT = new Exp(eAri, op, eAri2, eArileft, eAriright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECOMP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ECOMP ::= EARI 
            {
              Exp RESULT =null;
		int eArileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eAriright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp eAri = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(eAri, eArileft, eAriright, false);                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECOMP",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EARI ::= VALUE OPARI EARI 
            {
              Exp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Op op = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (ansem.gestValue(value) != EnumType.ENTERO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // Solo se pueden comparar enteros
                        ErrorC.añadirError(new ErrorC("Se esperaba una valor de tipo entero", value.getLinea(), Fase.SEMÁNTICO));
                    }
                    if (ansem.gestExp(exp) != EnumType.ENTERO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // Solo se pueden comparar enteros
                        ErrorC.añadirError(new ErrorC("Se esperaba una expresión de tipo entero", exp.getLinea(), Fase.SEMÁNTICO));
                    }
                    RESULT = new Exp(value, op, exp, valueleft, valueright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EARI",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EARI ::= VALUE 
            {
              Exp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(value, valueleft, valueright);                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EARI",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPLOG ::= Y 
            {
              Op RESULT =null;
		 RESULT = Op.Y;                                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOG",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPLOG ::= O 
            {
              Op RESULT =null;
		 RESULT = Op.O;                                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOG",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPCOMP ::= IGUAL 
            {
              Op RESULT =null;
		 RESULT = Op.IGUAL;                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPCOMP ::= IGUALNT 
            {
              Op RESULT =null;
		 RESULT = Op.IGUALNT;                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPCOMP ::= MAQ 
            {
              Op RESULT =null;
		 RESULT = Op.MAQ;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPCOMP ::= MEQ 
            {
              Op RESULT =null;
		 RESULT = Op.MEQ;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPCOMP ::= MAI 
            {
              Op RESULT =null;
		 RESULT = Op.MAI;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPCOMP ::= MEI 
            {
              Op RESULT =null;
		 RESULT = Op.MEI;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPARI ::= SUMA 
            {
              Op RESULT =null;
		 RESULT = Op.SUMA;                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARI",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPARI ::= RESTA 
            {
              Op RESULT =null;
		 RESULT = Op.RESTA;                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARI",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPARI ::= MULT 
            {
              Op RESULT =null;
		 RESULT = Op.MULT;                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARI",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPARI ::= DIV 
            {
              Op RESULT =null;
		 RESULT = Op.DIV;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARI",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPARI ::= MOD 
            {
              Op RESULT =null;
		 RESULT = Op.MOD;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARI",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALUE ::= DIGITO 
            {
              Value RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(num, "Ent", numleft, numright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALUE ::= CALL_FN 
            {
              Value RESULT =null;
		int call_fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int call_fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call_fn call_fn = (Call_fn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Symbol symbol = tSimbolos.getSymbol(call_fn.getId());
                    if (symbol != null) {
                        if (symbol.getTipoReturn() == EnumType.VACIO) {
                            // MANEJO DE ERRORES SEMANTICOS
                            // La función no devuelve nada
                            ErrorC.añadirError(new ErrorC("La función no devuelve nada", call_fn.getLinea(), Fase.SEMÁNTICO));
                        }
                    }

                    RESULT = new Value(call_fn, call_fnleft, call_fnright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALUE ::= ID 
            {
              Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(id, "Id", idleft, idright);                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALUE ::= ARRAY 
            {
              Value RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayG array = (ArrayG)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ansem.gestArray(array, arrayleft);
                    RESULT = new Value(array, arrayleft, arrayright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALUE ::= VAL_LETRA 
            {
              Value RESULT =null;
		int val_letraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val_letraright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val_letra = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(val_letra, "Car", val_letraleft, val_letraright);         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALUE ::= VAL_BOL 
            {
              Value RESULT =null;
		int val_bolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val_bolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Val_Bol val_bol = (Val_Bol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(val_bol, val_bolleft, val_bolright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALUE ::= PAR_A E PAR_C 
            {
              Value RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Value(exp, expleft, expright);                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALUE ::= ENTRADA 
            {
              Value RESULT =null;
		int entradaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int entradaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Entrada entrada = (Entrada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(entrada, entradaleft, entradaright);                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VAL_BOL ::= VERDADERO 
            {
              Val_Bol RESULT =null;
		 RESULT = Val_Bol.VERDADERO;                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAL_BOL",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VAL_BOL ::= FALSO 
            {
              Val_Bol RESULT =null;
		 RESULT = Val_Bol.FALSO;                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAL_BOL",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARRAY ::= L_ARR ID 
            {
              ArrayG RESULT =null;
		int list_arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list_arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_array list_arr = (L_array)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int nDimensiones = getDimensionesArray(list_arr);
                    RESULT = new ArrayG(id, list_arr, nDimensiones, idleft, idright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // L_ARR ::= CORCHETE_A E CORCHETE_C L_ARR 
            {
              L_array RESULT =null;
		int expArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expArr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int list_arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_array list_array = (L_array)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (ansem.gestExp(expArr) != EnumType.ENTERO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // El índice del array debe ser de tipo entero
                        ErrorC.añadirError(new ErrorC("El indice del array debe ser de tipo entero", expArr.getLinea(), Fase.SEMÁNTICO));
                    }
                    RESULT = new L_array(expArr, list_array, expArrleft, expArrright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARR",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // L_ARR ::= CORCHETE_A E CORCHETE_C 
            {
              L_array RESULT =null;
		int expArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp expArr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if (ansem.gestExp(expArr) != EnumType.ENTERO) {
                        // MANEJO DE ERRORES SEMANTICOS
                        // El índice del array debe ser de tipo entero
                        ErrorC.añadirError(new ErrorC("El indice del array debe ser de tipo entero", expArr.getLinea(), Fase.SEMÁNTICO));
                    }
                    RESULT = new L_array(expArr, null, expArrleft, expArrright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_ARR",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CALL_FN ::= ID ARGS_CALL 
            {
              Call_fn RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int args_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int args_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args_Call args_call = (Args_Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (tSimbolos.getFuncion(id) != null) {
                        // No tiene sentido validar los parámetros de una función que no existe
                        if (args_call != null) { // Caso con argumentos
                            // Se verifica que el número coincida
                            if (args_call.getNumArgs() != tSimbolos.getNumParametros(id)) {
                                // MANEJO DE ERRORES SEMANTICOS
                                // El número de argumentos no coincide
                                ErrorC.añadirError(new ErrorC("El número de argumentos no coincide con el esperado en la función", args_call.getLinea(), Fase.SEMÁNTICO));
                            } else {
                                // Se verifica que el tipo de los argumentos coincida
                                ansem.gestArgsCall(id, args_call);
                            }
                        } else { // Caso sin argumentos
                            // Se verifica que no tenga que haber argumentos
                            if (tSimbolos.getNumParametros(id) != 0) {
                                // MANEJO DE ERRORES SEMANTICOS
                                // El número de argumentos no coincide
                                ErrorC.añadirError(new ErrorC("Se esperan argumentos en la función", idleft, Fase.SEMÁNTICO));
                            }
                        }
                    }
                    RESULT = new Call_fn(id, args_call, idleft, idright);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // M ::= 
            {
              Object RESULT =null;
		 tSimbolos.añadirAmbito();                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
